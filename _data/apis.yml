version: 0.1.2
files:
  development:
    path: tatami.js
    size: '93.6kb'
  production:
    path: tatami.min.js
    size: '27.9kb'
  source_map: tatami.min.map
classes:
  - name: 核心
    flag: core
    categories:
      - name: 设置
        flag: setting
        apis:
          - func: mask
            desc: >
              <p>更改 Tatami 依附在全局对象上的名字。</p>
            invoke:
              - statement: 'Tatami.mask(guise)'
                arguments:
                  - name: guise
                    type: String
                return: Boolean
                desc: >
                  <p>原来的名字会被删除，即访问 <code>Tatami</code> 会报错。</p>
                demo: >
                  Tatami.mask("Tatami_new");

                  => true


                  Tatami_new;

                  => Object {mixin: function, each: function, type: function, slice: function, hasProp: function…}


                  Tatami;

                  => ReferenceError: Tatami is not defined
          - func: alias
            desc: >
              <p>为 Tatami 起个别名。</p>
            invoke:
              - statement: 'Tatami.alias(name)'
                arguments:
                  - name: name
                    type: String
                return: Object
                desc: >
                  <p>用别名也可以访问 Tatami 对象。</p>
                  <p class="note">只能设置一个别名，若在已设置别名的情况下再次调用该方法，则上次设置的别名会被销毁。</p>
                demo: >
                  Tatami.alias("TTM");

                  => Object {mixin: function, each: function, type: function, slice: function, hasProp: function…}


                  TTM === Tatami;

                  => true


                  Tatami.alias("FFF");

                  => Object {mixin: function, each: function, type: function, slice: function, hasProp: function…}


                  FFF === Tatami;

                  => true


                  TTM;

                  => ReferenceError: TTM is not defined
  - name: 工具
    flag: utils
    categories:
      - name: 字符串
        flag: string
        apis:
          - func: stringify
            desc: >
              <p>将任意类型的变量转化为字符串。</p>
            invoke:
              - statement: 'Tatami.stringify(target)'
                arguments:
                  - name: target
                    type: 
                return: String
                desc: 
                demo: >
                  Tatami.stringify(1234567);

                  => "1234567"


                  Tatami.stringify("1234567");

                  => "\"1234567\""


                  Tatami.stringify(true);

                  => "true"


                  Tatami.stringify(function() {
                    return 1234567 + "1234567";
                  });

                  => "function () {
                        return 1234567 + \"1234567\";
                      }"

                  Tatami.stringify([1, 2, 3, [4, [5, 6], 7]]);

                  => "[1,2,3,[4,[5,6],7]]"


                  Tatami.stringify({
                    n: 1234567,
                    s: "1234567",
                    b: true,
                    f: function() {
                      return 1234567 + "1234567";
                    }
                  });

                  => "{\"n\":1234567,\"s\":\"1234567\",\"b\":true,\"f\":function () {
                        return 1234567 + \"1234567\";
                      }}"
          - func: pad
            desc: >
              <p>用指定占位符填补字符串。</p>
            invoke:
              - statement: 'Tatami.pad(target, length[, placeholder])'
                arguments:
                  - name: target
                    type: String
                    desc: 原字符串
                  - name: length
                    type: Integer
                    desc: >
                      <p>必须为整数，可以是正数也可以是负数。</p>
                      <p>数字部分代表目标字符串的长度，正负号代表占位符添加的位置：正数时添加到原字符串的后边；负数时添加到原字符串的前边。</p>
                  - name: placeholder
                    type: String
                    desc: >
                      <p>占位符，只能是一个字符，默认为空格（<code>\x20</code>）。</p>
                return: String
                desc:
                demo: >
                  Tatami.pad("b", 3, "e");

                  => "bee"


                  Tatami.pad("var foo;", -10);

                  => "  var foo;"


                  Tatami.pad("var foo;", -10.9);

                  => "var foo;"
          - func: capitalize
            desc: >
              <p>将字符串首字母大写</p>
            invoke:
              - statement: 'Tatami.capitalize(target[, isAll])'
                arguments:
                  - name: target
                    type: String
                    desc: 原字符串
                  - name: isAll
                    type: Boolean
                    desc: 是否将所有英文字符串首字母大写
                return: String
                desc: 
                demo: >
                  Tatami.capitalize("tatami is a good library!");

                  => "Tatami is a good library!"


                  Tatami.capitalize("tatami is a good library!", true);

                  => "Tatami Is A Good Library!"


                  Tatami.capitalize("我的 mp3 播放器是 apple 牌的");

                  => "我的 Mp3 播放器是 apple 牌的"


                  Tatami.capitalize("我的 mp3 播放器是 apple 牌的", true);

                  => "我的 Mp3 播放器是 Apple 牌的"
          - func: camelCase
            desc: >
              <p>将字符串转换为驼峰式</p>
            invoke:
              - statement: 'Tatami.camelCase(target[, upper])'
                arguments:
                  - name: target
                    type: String
                    desc: 包含以连字符（<code>-</code>）、下划线（<code>_</code>）或空格（<code>\x20</code>）分隔的数字和英文的字符串
                  - name: upper
                    type: Boolean
                    desc: 默认为小驼峰式，若该值为 <code>true</code>，则为大驼峰式。
                return: String
                desc: 
                demo: >
                  // 小驼峰式

                  Tatami.camelCase("file_name-abc 9");

                  => "fileNameAbc9"


                  // 大驼峰式

                  Tatami.camelCase("file_name-abc 9", true);

                  => "FileNameAbc9"
          - func: zerofill
            desc: >
              <p>补零</p>
            invoke:
              - statement: 'Tatami.zerofill(target, digit)'
                arguments:
                  - name: target
                    type: Number / String
                    desc: 数字或数字型字符串
                  - name: digit
                    type: Integer
                    desc: >
                      <p>规则与 <code>Tatami.pad</code> 基本一样，只不过当 <code>target</code> 为小数时，若该值为正数则从小数点后开始计算长度，为负数时返回空字符串 <code>""</code>。</p>
                return: String
                desc: 
                demo: >
                  Tatami.zerofill(1, 3);

                  => "100"


                  Tatami.zerofill("1", -3);

                  => "001"


                  Tatami.zerofill(1.5, 3);

                  => "1.500"


                  Tatami.zerofill(1.5, -3);

                  => ""
          - func: trim
            desc: >
              <p>移除字符串两端的空白符</p>
            invoke:
              - statement: 'Tatami.trim(target)'
                arguments:
                  - name: target
                    type: String
                    desc: 包含空白符的字符串
                return: String
                desc: 
                demo: >
                  Tatami.trim("\n  This is a string.\r\t");

                  => "This is a string."
          # - func: substr
          #   desc: >
          #     <p>从指定位置开始截取指定长度的字符串</p>
          #   invoke:
          #     - statement: 'Tatami.substr(target, start[, length][, ignore])'
          #       arguments:
          #         - name: target
          #           type: String
          #         - name: start
          #           type: Integer
          #           desc: >
          #             <p>所要截取的字符串的起始索引。</p>
          #             <p>当大于或等于字符串长度时返回空字符串；为负数时则从字符串的结尾处往回数相应的个数的位置开始；如果既为负数绝对值又大于字符串长度，则从 <code>0</code> 开始。</p>
          #         - name: length
          #           type: Integer
          #           desc: >
          #             <p>需要截取的字符串的长度，为正数。</p>
          #             <p>当是零或负数时返回空字符串；若忽略则返回 <code>start</code> 到字符串结尾。</p>
          #         - name: ignore
          #           type: String / RegExp
          #       return: String
          #       desc: 
          #       demo: >
          #         var str = "Tatami is a JavaScript library.";


          #         Tatami.substr(str, 3);

          #         => "ami is a JavaScript library."


          #         Tatami.substr(str, 3, 6);

          #         => "ami is"


          #         Tatami.substr(str, str.length);

          #         => ""


          #         Tatami.substr(str, -3);

          #         => "ry."


          #         Tatami.substr(str, -(str.length + 2));

          #         => "Tatami is a JavaScript library."


          #         Tatami.substr(str, 0, 0);

          #         => ""


          #         Tatami.substr(str, 0, -1);

          #         => ""
      - name: 数字
        flag: number
        apis:
          - func: random
            desc: >
              <p>返回一个随机整数</p>
            invoke:
              - statement: 'Tatami.random(min[, max])'
                arguments:
                  - name: min
                    type: Number
                  - name: max
                    type: Number
                    desc: 忽略时则返回 <code>0</code> 到 <code>min</code> 之间的整数
                return: Integer
                desc: >
                  <p>返回一个介于 <code>min</code> 和 <code>max</code> 之间的整数（包括 <code>min</code> 和 <code>max</code>）。</p>
                demo: >
                  Tatami.random(1, 10);

                  => 10
      - name: 集合
        flag: collection
        apis:
          - func: each
            desc: >
              <p>遍历数组、对象、类数组对象等</p>
            invoke:
              - statement: 'Tatami.each(target[, callback])'
                arguments:
                  - name: target
                    type: Array / Object / Array-like object
                  - name: callback
                    type: Function
                return: Object
                desc: >
                  <p>每次遍历都会调用一次 <code>callback</code>，并向 <code>callback</code> 传入 3 个参数：</p>
                  <ol>
                    <li>当前的值</li>
                    <li>当前的索引（数组、类数组对象）或键（对象）</li>
                    <li>被遍历的集合</li>
                  </ol>
                  <p><code>callback</code> 的 <code>this</code> 指向当前的值。如果想跳出遍历，需要在 <code>callback</code> 中 <code>return false;</code>。</p>
                demo: >
                  // 遍历数组

                  Tatami.each([1, 2, 3, 4, 5], function(value, index, target) {
                    target[index] = this * value;
                    return !(this % 3 === 0);
                  });

                  => [1, 4, 9, 4, 5]


                  // 遍历对象

                  var str = "";

                  Tatami.each({foo: "foo", bar: "bar"}, function(value, key, target) {
                    str += this + value + key;
                  });

                  str;

                  => "foofoofoobarbarbar"
          - func: filter
            desc: >
              <p>过滤掉不符合预期的单元</p>
            invoke:
              - statement: 'Tatami.filter(target, callback[, context])'
                arguments:
                  - name: target
                    type: Array / Plain object / String
                  - name: callback
                    type: Function
                    desc: >
                      <p>应用于每个单元的回调函数，若返回值为 <code>true</code> 则保留，否则被过滤。</p>
                      <p>在调用时会被传进三个参数：<code>value</code>、<code>index/key</code> 和 <code>target</code>。</p>
                  - name: context
                    type: 
                    desc: <code>callback</code> 的上下文，默认为 <code>window</code>。
                return: Array
                desc:
                demo: >
                  var arrDemo = Tatami.filter([1, "2", true, undefined, {"foo": 123}, null, [3], function (){}, /\d/], function( value, index, arr ) {
                    return typeof value === "object";
                  });


                  console.log(arrDemo);

                  => [{"foo":123},null,[3],/\d/]


                  var objDemo = Tatami.filter({one: 1, two: 2, three: 3, four: 4, five: 5, six: 6, seven: 7}, function( value, key, obj ) {
                    return value % 2 === 0;
                  });


                  console.log(objDemo);

                  => Object {two: 2, four: 4, six: 6}


                  var strDemo = Tatami.filter("1234567", function( chr, index, str ) {
                    return chr % 2 === 1;
                  });


                  console.log(strDemo);

                  => "1357"
          - func: map
            desc: >
              <p>改变每个单元的值</p>
            invoke:
              - statement: 'Tatami.map(target, callback[, context])'
                arguments:
                  - name: target
                    type: Array / Plain object / String
                  - name: callback
                    type: Function
                    desc: >
                      <p>应用于每个单元的回调函数，返回值为被遍历到的单元的新值。</p>
                      <p>在调用时会被传进三个参数：<code>value</code>、<code>index/key</code> 和 <code>target</code>。</p>
                  - name: context
                    type: 
                    desc: <code>callback</code> 的上下文，默认为 <code>window</code>。
                return: Array
                desc:
                demo: >
                  var arrDemo = Tatami.map([1, "2", true, undefined, {"foo": 123}, null, [3], function (){}, /\d/], function( value, index, arr ) {
                    return this.isNumeric(value) ? value * 100 : value;
                  }, Tatami);


                  console.log(arrDemo);

                  => [100, 200, true, undefined, {"foo": 123}, null, [3], function (){}, /\d/]


                  var objDemo = Tatami.map({one: 1, two: 2, three: 3, four: 4, five: 5, six: 6, seven: 7}, function( value, key, obj ) {
                    return value * key.length;
                  });


                  console.log(objDemo);

                  => Object {one: 3, two: 6, three: 15, four: 16, five: 20, six: 18, seven: 35}


                  var strDemo = Tatami.map("1234567", function( chr, index, str ) {
                    return (index === 0 ? "" : "-") + chr * index;
                  });


                  console.log(strDemo);

                  => "0-2-6-12-20-30-42"
          - func: sum
            desc: >
              <p>计算集合中每个数字之和。</p>
            invoke:
              - statement: 'Tatami.sum(target)'
                arguments:
                  - name: target
                    type: Array / Plain object
                    desc: 每个单元的值为数字的集合
                return: Number
                desc: 
                demo: >
                  Tatami.sum([-2, 3, 4, 5]);

                  => 10


                  Tatami.sum({a: -2, b: 3, c: 4, d: 5});

                  => 10
          - func: max
            desc: >
              <p>求集合中的最大值</p>
            invoke:
              - statement: 'Tatami.max(target[, callback][, context])'
                arguments:
                  - name: target
                    type: Array / Object
                    desc: 每个单元必须为数字或数字型字符串
                  - name: callback
                    type: Function
                    desc: >
                      <p>对每个单元进行操作的处理函数，要返回一个数字类型的值。</p>
                      <p>在调用时会传入 <code>value</code>、<code>index/key</code>、<code>collection</code> 三个变量。</p>
                      <p>回调函数的上下文由 <code>context</code> 参数决定。</p>
                  - name: context
                    type: 
                return: Number
                desc: 
                demo: >
                  Tatami.max([8, -2, 3, "111", 4, 5]);

                  => 111


                  Tatami.max([8, -2, 3, "ddd", 4, 5]);

                  => NaN


                  Tatami.max([8, -2, 3, "111", 4, 5], function( val, idx, list ) {
                    return -(val);
                  });

                  => -2


                  Tatami.max({a: 8, b: -2, c: 3, d: "111", e: 4, f: 5});

                  => 111


                  Tatami.max({a: 8, b: -2, c: 3, d: "ddd", e: 4, f: 5});

                  => NaN


                  Tatami.max({a: 8, b: -2, c: 3, d: "111", e: 4, f: 5}, function( val, idx, list ) {
                    return -(val);
                  });

                  => -2
          - func: min
            desc: >
              <p>求集合中的最小值</p>
            invoke:
              - statement: 'Tatami.min(target[, callback][, context])'
                arguments:
                  - name: target
                    type: Array / Object
                    desc: 每个单元必须为数字或数字型字符串
                  - name: callback
                    type: Function
                    desc: >
                      <p>对每个单元进行操作的处理函数，要返回一个数字类型的值。</p>
                      <p>在调用时会传入 <code>value</code>、<code>index/key</code>、<code>collection</code> 三个变量。</p>
                      <p>回调函数的上下文由 <code>context</code> 参数决定。</p>
                  - name: context
                    type: 
                return: Number
                desc: 
                demo: >
                  Tatami.min([8, -2, 3, "111", 4, 5]);

                  => -2


                  Tatami.min([8, -2, 3, "ddd", 4, 5]);

                  => NaN


                  Tatami.min([8, -2, 3, "111", 4, 5], function( val, idx, list ) {
                    return -(val);
                  });

                  => "111"


                  Tatami.min({a: 8, b: -2, c: 3, d: "111", e: 4, f: 5});

                  => -2


                  Tatami.min({a: 8, b: -2, c: 3, d: "ddd", e: 4, f: 5});

                  => NaN


                  Tatami.min({a: 8, b: -2, c: 3, d: "111", e: 4, f: 5}, function( val, idx, list ) {
                    return -(val);
                  });

                  => "111"
      - name: 对象
        flag: objects
        apis:
          - func: mixin
            desc: >
              <p>扩展指定对象</p>
            invoke:
              - statement: 'Tatami.mixin(target[, object1][, objectN])'
                arguments:
                  - name: target
                    type: Object
                  - name: object1
                    type: Object
                  - name: objectN
                    type: Object
                return: Object
                desc: >
                  <p>可以传入任意多个类型为 Object 的参数，如果具有相同的 key，则后者覆盖前者，否则附加到前者上。当只传入一个参数时，则扩展 Tatami 本身。返回值为被扩展的对象，即 <code>target</code>。</p>
                demo: >
                  // 扩展 Tatami 自身

                  Tatami.mixin({foo: true, bar: false});


                  Tatami.foo;

                  => true


                  Tatami.bar;

                  => false


                  // 返回新对象

                  Tatami.mixin({}, {foo: true, bar: false});

                  => {foo: true, bar: false}


                  Tatami.mixin();

                  => {}
              - statement: 'Tatami.mixin(deep, target, object1[, objectN])'
                arguments:
                  - name: deep
                    type: Boolean
                    desc: 如果是 true 的话则进行深度复制。
                  - name: target
                    type: Object
                  - name: object1
                    type: Object
                  - name: objectN
                    type: Object
                return: Object
                demo: >
                  var obj1 = {
                      foo: {
                        foo: "foo"
                      }
                    };

                  var obj2 = {
                      foo: {
                        bar: "bar"
                      }
                    };

                  // 普通扩展

                  Tatami.mixin({}, obj1, obj2);

                  => {foo: {bar: "bar"}}


                  // 深度复制

                  Tatami.mixin(true, {}, obj1, obj2);

                  => {foo: {foo: "foo", bar: "bar"}}

          - func: extend
            desc: >
              <p>使用特定格式的数据扩充指定对象。内置「预处理」功能。</p>
            invoke:
              - statement: 'Tatami.extend(data[, target])'
                arguments:
                  - name: data
                    type: Array / Plain object
                    desc: 具备特定格式的数据
                  - name: target
                    type: Object
                    desc: 被扩充的对象。忽略此参数则扩充到 Tatami 上。
                return: Object
                desc: >
                  <p>返回值为包含通过 <code>data</code> 构造的方法的对象。</p>
                  <p><code>data</code> 的基本结构为：</p>
                  <pre><code>{
                    validator: function() {},
                    value: "",
                    handlers: [
                      {
                        name: "methodName",
                        handler: function() {},
                        validator: function() {},
                        value: ""
                      }
                    ]
                  }</code></pre>
                  <p>其中 <code>validator</code> 用于验证参数合法性，<code>value</code> 为验证不通过时的返回值，它们都是可省略的。</p>
                demo: >
                  var GeometryMethods = {
                      Graphic: {
                        Circle: {
                          validator: function( radius ) {
                            return typeof radius === "number";
                          },
                          value: 0,
                          handlers: [{
                              name: "perimeter",
                              handler: function( radius ) {
                                return Math.PI * radius * 2;
                              }
                            }]
                        },
                        Rectangle: {
                          handlers: [{
                              name: "area",
                              handler: function( width, height ) {
                                return true;
                              },
                              validator: function( width, height ) {
                                return typeof width === "number" && typeof height === "number";
                              },
                              value: 0
                            }]
                        }
                      }
                    };

                  // 扩展 Tatami 自身

                  Tatami.extend(GeometryMethods);


                  typeof Tatami.perimeter;

                  => "function"


                  // 创建新对象

                  var Geometry = Tatami.extend(GeometryMethods, {});

                  
                  Geometry;

                  => Object {perimeter: function, area: function}


                  // 扩展新建的对象

                  Tatami.extend({
                    handlers: [{
                      name: "volume",
                      handler: function( a, b, h ) {
                        return a * b * h;
                      }
                    }]
                  }, Geometry);


                  Geometry;

                  => Object {perimeter: function, area: function, volume: function}
          - func: hasProp
            desc: >
              <p>判断指定对象自身是否拥有指定属性。</p>
            invoke:
              - statement: 'Tatami.hasProp(prop[, object])'
                arguments:
                  - name: prop
                    type: String
                  - name: object
                    type: Object
                    desc: >
                      <p>被检测属性的宿主。如果忽略，则为 Tatami 自身。</p>
                return: Boolean
                desc:
                demo: >
                  Tatami.hasProp("hasProp");

                  => true


                  Tatami.hasProp("document", window);

                  => true
          - func: namespace
            desc: >
              <p>通过命名空间格式的字符串从指定对象上获取值。若指定对象上不存在相应的 key，则创建一个空对象。</p>
            invoke:
              - statement: 'Tatami.namespace(target[, nsStr1][, nsStrN][, isGlobal])'
                arguments:
                  - name: target
                    type: Object
                  - name: nsStr1
                    type: String
                  - name: nsStrN
                    type: String
                  - name: isGlobal
                    type: Boolean
                return: Object
                desc: >
                  <p><code>nsStr1</code> 和 <code>nsStrN</code> 是以 <code>.</code> 分割的由数字、字母和下划线所组成的字符串。若 <code>isGlobal</code> 的值为 <code>true</code>，则 <code>target</code> 为全局对象。</p>
                demo: 
          - func: keys
            desc: >
              <p>获取指定对象的 key 集合。</p>
            invoke:
              - statement: 'Tatami.keys(target)'
                arguments:
                  - name: target
                    type: Object
                return: Array
                desc: 
                demo: >
                  var obj = {
                    foo: "foo",
                    bar: "bar",
                    foobar: function() {
                      return this.foo + this.bar;
                    }
                  };


                  Tatami.keys(obj);

                  => ["bar", "foo", "foobar"]
      - name: 数组及类数组
        flag: arrays
        apis:
          - func: slice
            desc: >
              <p>返回数组、类数组对象的片段。</p>
            invoke:
              - statement: 'Tatami.slice(target[, begin][, end])'
                arguments:
                  - name: target
                    type: Array / Array-like object
                  - name: begin
                    type: Integer
                  - name: end
                    type: Integer
                return: Array
                desc: >
                  <p><code>begin</code> 和 <code>end</code> 是以零开始的索引，为负数时表示从 <code>target</code> 的末尾算起的偏移量。当 <code>begin</code> 被忽略时从 <code>0</code> 开始截取；<code>end</code> 被忽略时，截取到 <code>target</code> 的末尾。</p>
                  <p class="note">String 类型也能够使用。</p>
                demo: >
                  var arr = [1, 2, 3, 4, 5, 6];


                  Tatami.slice(arr);

                  => [1, 2, 3, 4, 5, 6]


                  Tatami.slice(arr) === arr;

                  => false


                  Tatami.slice(arr, 2);

                  => [3, 4, 5, 6]


                  Tatami.slice(arr, -2);

                  => [5, 6]


                  Tatami.slice(arr, 2, 4);

                  => [3, 4]


                  Tatami.slice(arr, 2, 2);

                  => []


                  Tatami.slice(arr, -2, -3);

                  => []


                  Tatami.slice(arr, -2, -1);

                  => [5]


                  Tatami.slice(arr, 2, -1);

                  => [3, 4, 5]
          - func: inArray
            desc: >
              <p>获取元素在数组中的位置</p>
            invoke:
              - statement: 'Tatami.inArray(element, array[, from])'
                arguments:
                  - name: element
                    type: String / Number / Boolean / Undefined / Null
                    desc: 被查找的值。只能是原始值，否则返回值永远为 <code>-1</code>。
                  - name: array
                    type: Array
                  - name: from
                    type: Integer
                    desc: 开始查找的索引位置
                return: Integer
                desc: >
                  <p>返回 <code>element</code> 在 <code>array</code> 中的位置（索引），<code>-1</code> 表示没找到 <code>element</code> 或参数不合法。</p>
                demo: >
                  var arr = [1, "2", true, undefined, {foo: 123}, null, [3]];


                  Tatami.inArray("2", arr);

                  => 1


                  Tatami.inArray(2, arr);

                  => -1


                  Tatami.inArray("2", arr, 1);

                  => 1


                  Tatami.inArray(2, arr, 3);

                  => -1
          - func: product
            desc: >
              <p>计算数组中每个数字的乘积</p>
            invoke:
              - statement: 'Tatami.product(array)'
                arguments:
                  - name: array
                    type: Array
                    desc: >
                      <p>数字数组</p>
                return: Number
                desc: >
                  <p>数组中的非数字值会被忽略掉。</p>
                demo: >
                  Tatami.product([1, 2, 3, 4, 5, "6"]);

                  => 720


                  Tatami.product([1, 2, 3, 4, 5, "6aaa"]);

                  => 120
          - func: unique
            desc: >
              <p>移除重复的值</p>
            invoke:
              - statement: 'Tatami.unique(array[, last])'
                arguments:
                  - name: array
                    type: Array
                  - name: last
                    type: Boolean
                    desc: 设置为 <code>true</code> 则保留相同的值中最后的那个
                return: Array
                desc: >
                  <div class="note">
                    <p>需要说明以下几点：</p>
                    <ol>
                      <li>只作用于原始值；</li>
                      <li>数字型字符串会被转化为数字。</li>
                    </ol>
                  </div>
                demo: >
                  var arr = [1, 2, "1", [true], 4, [true]];


                  Tatami.unique(arr);

                  => [1, 2, [true], 4, [true]]


                  Tatami.unique(arr, true);

                  => [2, 1, [true], 4, [true]]
          - func: range
            desc: >
              <p>创建一个包含指定范围单元的数组</p>
            invoke:
              - statement: 'Tatami.range(from, to[, step])'
                arguments:
                  - name: from
                    type: Number / String
                  - name: to
                    type: Number / String
                  - name: step
                    type: Number
                    desc: 只能为正数，默认值为 <code>1</code>。
                return: Array
                desc: >
                  <p>返回数组中从 <code>from</code> 到 <code>to</code> 的单元，包括它们本身。如果 <code>from</code> 大于 <code>to</code>，则序列将从 <code>to</code> 到 <code>from</code>。</p>
                demo: >
                  Tatami.range(5, -5);

                  => [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]


                  Tatami.range(1, 10);

                  => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


                  // step 为整数

                  Tatami.range(-10, 10, 2);

                  => [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]


                  // step 为小数

                  Tatami.range(-10, 10, 2.5);

                  => [-10, -7.5, -5, -2.5, 0, 2.5, 5, 7.5, 10]


                  // step 为负数时被忽略，采用默认的 1

                  Tatami.range(1, 10, -5);

                  => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


                  // 字符

                  Tatami.range("a", "h");

                  => ["a", "b", "c", "d", "e", "f", "g", "h"]


                  Tatami.range("h", "a", 2);

                  => ["h", "f", "d", "b"]
          - func: reduce
            desc: >
              <p>对数组中的每个单元进行处理，最后返回一个值。</p>
            invoke:
              - statement: 'Tatami.reduce(array, callback[, initialValue][, right])'
                arguments:
                  - name: array
                    type: Array
                  - name: callback
                    type: Function
                    desc: >
                      <p>每次都会传入四个参数：上次迭代的返回值（<code>previousValue</code>）、当前值（<code>currentValue</code>）、当前索引（<code>index</code>）和被迭代的数组（<code>array</code>）。</p>
                  - name: initialValue
                    type: 
                    desc: 第一次迭代时传入 <code>callback</code> 作为第一个参数的值
                  - name: right
                    type: Boolean
                    desc: 从右侧开始迭代
                return: 
                desc: 
                demo: >
                  Tatami.reduce([1, 2, 3], function( prev, curr ) {
                    return String(prev) + String(curr);
                  });

                  => "123"


                  // 设置 initialValue

                  Tatami.reduce([1, 2, 3], function( prev, curr ) {
                    return String(prev) + String(curr);
                  }, 9);

                  => "9123"


                  // 从右侧开始迭代
                  
                  Tatami.reduce([1, 2, 3], function( prev, curr ) {
                    return String(prev) + String(curr);
                  }, 9, true);

                  => "9321"
          - func: flatten
            desc: >
              <p>将嵌套数组扁平化</p>
            invoke:
              - statement: 'Tatami.flatten(target)'
                arguments:
                  - name: target
                    type: Array
                return: Array
                desc: 
                demo: >
                  Tatami.flatten([1, [2, [3, [4, 5, 5, 5]], 5]]);

                  => [1, 2, 3, 4, 5, 5, 5, 5]
          - func: shuffle
            desc: >
              <p>打乱数组元素</p>
            invoke:
              - statement: 'Tatami.shuffle(target)'
                arguments:
                  - name: target
                    type: Array
                return: Array
                desc: 
                demo: >
                  var arr = [1, 2, 3, 4, 5, 6];


                  var newArr = Tatami.shuffle(arr);


                  console.log(newArr);

                  => [2, 4, 3, 5, 6, 1]


                  console.log(newArr === arr);

                  => false
      - name: 日期时间
        flag: date
        apis:
          - func: date
            desc: >
              <p>格式化日期</p>
            invoke:
              - statement: 'Tatami.date(format[, date])'
                arguments:
                  - name: format
                    type: String
                    desc: >
                      <p>指定格式化的形式（参照 <cite><a href="http://php.net/manual/en/function.date.php" target="_blank">PHP: date</a></cite>）</p>
                  - name: date
                    type: Date / String
                    desc: >
                      <p>日期对象或能被解析成日期对象的字符串（参照 <cite><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse" target="_blank">Date.parse()</a></cite>）</p>
                return: String
                desc: >
                  <p>如果 <code>date</code> 被忽略或者非法，则返回当前时间的格式化后的结果。</p>
                demo: >
                  // ISO 8601 扩展格式（UTC）

                  Tatami.date("y-m-d H:i:s", "1994-03-28T10:11:22");

                  => "94-03-28 18:11:22"


                  // ISO 8601 扩展格式（指定时区）

                  Tatami.date("y-m-d H:i:s", "1994-03-28T10:11:22+0800");

                  => "94-03-28 10:11:22"


                  Tatami.date("F j, Y", "Feb 24 1955 GMT");

                  => "February 24, 1955"


                  // 传入当前时间的日期对象

                  Tatami.date("Y年n月j日", new Date());

                  => "2014年7月24日"


                  // 传入错误非法日期参数，返回当前时间

                  Tatami.date("Y年n月j日", "Tatami is good!");

                  => "2014年7月24日"


                  // 忽略日期参数，返回当前时间

                  Tatami.date("Y年n月j日");

                  => "2014年7月24日"                  
          - func: now
            desc: >
              <p>取得当前时间</p>
            invoke:
              - statement: 'Tatami.now([isObject])'
                arguments:
                  - name: isObject
                    type: Boolean
                    desc: 值为 <code>true</code> 时返回日期对象
                return: Integer / Date
                desc: >
                  <p>默认返回毫秒，即 <code>(new Date()).getTime()</code>。</p>
                demo: >
                  Tatami.now();

                  => 1406183042252


                  Tatami.now(true);

                  => Thu Jul 24 2014 14:24:05 GMT+0800 (China Standard Time)
      - name: 变量检测
        flag: data_type
        apis:
          - func: type
            desc: >
              <p>获取变量的数据类型。</p>
            invoke:
              - statement: Tatami.type(object)
                arguments:
                  - name: object
                    type: 
                return: String
                desc: >
                  <p>返回值为以下的其中之一：</p>
                  <ul>
                    <li><code>string</code></li>
                    <li><code>number</code></li>
                    <li><code>boolean</code></li>
                    <li><code>null</code></li>
                    <li><code>undefined</code></li>
                    <li><code>array</code></li>
                    <li><code>object</code></li>
                    <li><code>function</code></li>
                    <li><code>date</code></li>
                    <li><code>regexp</code></li>
                  </ul>
                demo: >
                  Tatami.type("");

                  => "string"


                  Tatami.type(1);

                  => "number"


                  Tatami.type(true);

                  => "boolean"


                  Tatami.type(null);

                  => "null"


                  Tatami.type(undefined);

                  => "undefined"


                  Tatami.type([]);

                  => "array"


                  Tatami.type({});

                  => "object"


                  Tatami.type(function() {});

                  => "function"


                  Tatami.type(new Date());

                  => "date"


                  Tatami.type(/.*/);

                  => "regexp"


                  Tatami.type();

                  => null
          - func: isString
            desc: >
              <p>判断是否为 String 类型。</p>
            invoke:
              - statement: Tatami.isString(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isString("");

                  => true


                  Tatami.isString(new String());

                  => true


                  Tatami.isString(undefined);

                  => false


                  Tatami.isString();

                  => false
          - func: isNumber
            desc: >
              <p>判断是否为 Number 类型。</p>
            invoke:
              - statement: Tatami.isNumber(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isNumber(1);

                  => true


                  Tatami.isNumber(-3.1415);

                  => true


                  Tatami.isNumber(NaN);

                  => false


                  Tatami.isNumber(Infinity);

                  => true


                  Tatami.isNumber("3.1415");

                  => false


                  Tatami.isNumber();

                  => false
          - func: isBoolean
            desc: >
              <p>判断是否为 Boolean 类型。</p>
            invoke:
              - statement: Tatami.isBoolean(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isBoolean(true);

                  => true


                  Tatami.isBoolean(undefined);

                  => false


                  Tatami.isBoolean(new Boolean());

                  => true


                  Tatami.isBoolean(null);

                  => false


                  Tatami.isBoolean();

                  => false
          - func: isArray
            desc: >
              <p>判断是否为 Array 类型。</p>
            invoke:
              - statement: Tatami.isArray(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isArray([]);

                  => true


                  Tatami.isArray(new Array());

                  => true


                  Tatami.isArray(document.links);

                  => false


                  Tatami.isArray({});

                  => false


                  Tatami.isArray("");

                  => false


                  Tatami.isArray();

                  => false
          - func: isObject
            desc: >
              <p>判断是否为 Object 类型。</p>
            invoke:
              - statement: Tatami.isObject(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isObject({});

                  => true


                  Tatami.isObject(window);

                  => true


                  Tatami.isObject([]);

                  => false


                  Tatami.isObject(null);

                  => false


                  Tatami.isObject(new Object());

                  => true


                  Tatami.isObject();

                  => false
          - func: isFunction
            desc: >
              <p>判断是否为 Function 类型。</p>
            invoke:
              - statement: Tatami.isFunction(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isFunction(function() {});

                  => true


                  Tatami.isFunction(new Function());

                  => true
          - func: isDate
            desc: >
              <p>判断是否为 Date 类型。</p>
            invoke:
              - statement: Tatami.isDate(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isDate(new Date());

                  => true
          - func: isRegExp
            desc: >
              <p>判断是否为 RegExp 类型。</p>
            invoke:
              - statement: Tatami.isRegExp(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isRegExp(new RegExp());

                  => true


                  Tatami.isRegExp(/.*/);

                  => true
          - func: isNumeric
            desc: >
              <p>判断是否为数字型字符串或 Number 类型。</p>
            invoke:
              - statement: Tatami.isNumeric(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isNumeric("-10");

                  => true


                  Tatami.isNumeric(16);

                  => true


                  Tatami.isNumeric(0xFF);

                  => true


                  Tatami.isNumeric("0Xee");

                  => true


                  Tatami.isNumeric(3.1415);

                  => true


                  Tatami.isNumeric(0144);

                  => true


                  Tatami.isNumeric("");

                  => false


                  Tatami.isNumeric([]);

                  => false


                  Tatami.isNumeric([1]);

                  => false


                  Tatami.isNumeric(NaN);

                  => false


                  Tatami.isNumeric(null);

                  => false


                  Tatami.isNumeric(true);

                  => false


                  Tatami.isNumeric(Infinity);

                  => false


                  Tatami.isNumeric(undefined);

                  => false
          - func: isInteger
            desc: >
              <p>判断是否为一个整型数字。</p>
            invoke:
              - statement: Tatami.isInteger(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isInteger(0x88);

                  => true


                  Tatami.isInteger(0100);

                  => true


                  Tatami.isInteger(+10.0);

                  => true


                  Tatami.isInteger(-1);

                  => true


                  Tatami.isInteger("0x88");

                  => true


                  Tatami.isInteger("0100");

                  => true


                  Tatami.isInteger("+10.0");

                  => true


                  Tatami.isInteger("-1");

                  => true
          - func: isArrayLike
            desc: >
              <p>判断是否为类数组对象。</p>
            invoke:
              - statement: Tatami.isArrayLike(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isArrayLike([]);

                  => false


                  Tatami.isArrayLike(document.links);

                  => true


                  Tatami.isArrayLike(document.getElementsByTagName("div"));

                  => true
          - func: isPlainObject
            desc: >
              <p>判断是否为纯对象。</p>
            invoke:
              - statement: Tatami.isPlainObject(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isPlainObject(document);

                  => false


                  Tatami.isPlainObject({});

                  => true


                  Tatami.isPlainObject(new Object());

                  => true
          - func: isEmpty
            desc: >
              <p>判断是否为空。</p>
            invoke:
              - statement: Tatami.isEmpty(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: >
                  <p>当 <code>object</code> 的值是以下几种：</p>
                  <ul>
                    <li><code>null</code></li>
                    <li><code>undefined</code></li>
                    <li><code>""</code></li>
                    <li><code>{}</code></li>
                  </ul>
                  <p>或者是数组、类数组对象并且 <code>object.length</code> 的值为 <code>0</code> 时，结果返回 <code>true</code>。</p>
                demo: >
                  Tatami.isEmpty(null);

                  => true

                  
                  Tatami.isEmpty(undefined);

                  => true

                  
                  Tatami.isEmpty("");

                  => true

                  
                  Tatami.isEmpty([]);

                  => true

                  
                  Tatami.isEmpty({});

                  => true
          - func: isWindow
            desc: >
              <p>判断是否为 Window 对象。</p>
            invoke:
              - statement: Tatami.isWindow(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isWindow(window);

                  => true
          - func: isElement
            desc: >
              <p>判断是否为 DOM 元素节点。</p>
            invoke:
              - statement: Tatami.isElement(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isElement(document);

                  => false


                  Tatami.isElement(document.body);

                  => true


                  Tatami.isElement(window);

                  => false
          - func: equal
            desc: >
              <p>比较两个同类型的变量是否相等</p>
            invoke:
              - statement: 'Tatami.equal(base, target[, strict])'
                arguments:
                  - name: base
                    type: 
                  - name: target
                    type: 
                  - name: strict
                    type: Boolean
                    desc: 值为 <code>true</code> 时严格比较
                return: Boolean
                desc: >
                  <p>当 <code>base</code> 和 <code>target</code> 为纯对象或数组时，如果 <code>strict</code> 的值为 <code>true</code> 则比较它们的引用，否则对它们的结构进行对比。</p>
                demo: >
                  var arr1 = [1, 2, 3];

                  var arr2 = [1, 2, 3];

                  var arr3 = [1, 3, 2];

                  var obj1 = {foo: "foo", bar: "bar", foobar: function() { return this.foo + this.bar; }};

                  var obj2 = {foo: "foo", bar: "bar", foobar: function() { return this.foo + this.bar; }};

                  var obj3 = {foo: "foo", foobar: function() { return this.foo + this.bar; }, bar: "bar"};


                  // 比较两个结构相同、值也相同的数组

                  Tatami.equal(arr1, arr2);

                  => true


                  // 严格比较两个结构相同、值也相同的数组
                  
                  Tatami.equal(arr1, arr2, true);

                  => false


                  // 比较两个结构不同、值相同的数组
                  
                  Tatami.equal(arr1, arr3);

                  => false


                  // 比较两个结构相同、key 顺序相同的纯对象

                  Tatami.equal(obj1, obj2);

                  => true


                  // 严格比较两个结构相同、key 顺序相同的纯对象

                  Tatami.equal(obj1, obj2, true);

                  => false


                  // 比较两个结构相同、key 顺序不同的纯对象

                  Tatami.equal(obj1, obj3);

                  => true


                  // 比较两个值相同的原始类型

                  Tatami.equal(1, 1);

                  => true


                  // 严格比较两个值相同的原始类型
                  
                  Tatami.equal(1, 1, true);

                  => true


                  // 比较值相同的原始类型和对应的包装对象
                  
                  Tatami.equal(1, new Number(1));

                  => true


                  // 严格比较值相同的原始类型和对应的包装对象

                  Tatami.equal(1, new Number(1), true);

                  => false


                  // 比较两个在用 == 时返回 true 的原始类型

                  Tatami.equal(1, "1");

                  => false
  - name: 项目开发
    flag: project
    categories:
      - name: 运行环境
        flag: runtime
        apis:
          - func: browser
            desc: >
              <p>获取浏览器的相关信息，包括种类及版本号。</p>
            invoke:
              - statement: Tatami.browser
                return: Object
                desc: >
                  <p>以 <code>{BROWSER_TYPE: true, version: "BROWSER_VERSION", language: "BROWSER_LANGUAGE"}</code> 的形式返回。其中 <code>BROWSER_TYPE</code> 的可能值有：</p>
                  <ul>
                    <li><code>msie</code></li>
                    <li><code>chrome</code></li>
                    <li><code>firefox</code></li>
                    <li><code>safari</code></li>
                    <li><code>opera</code></li>
                  </ul>
                  <p class="note">当值为 <code>chrome</code> 或 <code>safari</code> 时，会多出一个 <code>{webkit: true}</code> 属性；当值为 <code>firefox</code> 时，会多出一个 <code>{mozilla: true}</code> 属性。</p>
                demo: >
                  // IE 浏览器

                  Tatami.browser;

                  => {msie: true, version: "11.0", language: "zh-CN"}


                  // Chrome 浏览器

                  Tatami.browser;

                  => {chrome: true, version: "34.0.1847.131", webkit: true, language: "ja"}
          - func: platform
            desc: >
              <p>获取平台的相关信息，包括种类、版本号及是否可触摸。</p>
            invoke:
              - statement: Tatami.platform
                return: Object
                desc: >
                  <p>以 <code>{PLATFORM_TYPE: true, version: "PLATFORM_VERSION", touchable: true}</code> 的形式返回。其中 <code>PLATFORM_TYPE</code> 的可能值有：</p>
                  <ul>
                    <li><code>windows</code></li>
                    <li><code>macintosh</code></li>
                    <li><code>iphone</code></li>
                    <li><code>ipod</code></li>
                    <li><code>ipad</code></li>
                    <li>...</li>
                  </ul>
                  <p class="note">当值为 <code>iphone</code>、<code>ipod</code> 或 <code>ipad</code> 时，会多出一个 <code>{ios: true}</code> 属性。</p>
                demo: >
                  // Windows 7

                  Tatami.platform;

                  => {touchable: false, version: "7", windows: true}


                  // iPhone 5s

                  Tatami.platform;

                  => {touchable: true, version: "7.1.2", iphone: true, ios: true}
          - func: plugins
            desc: >
              <p>获取插件的支持情况。目前支持的插件检测有以下几种：</p>
              <ul>
                <li>PDF</li>
              </ul>
            invoke:
              - statement: Tatami.plugins
                return: Object
                desc: 
                demo: >
                  Tatami.plugins.pdf;

                  => true
      - name: 流程控制
        flag: flow
        apis:
          - func: prepare
            desc: >
              <p>添加需要在 <code>DOMContentLoaded</code> 之前调用的处理函数</p>
            invoke:
              - statement: 'Tatami.prepare(handler)'
                arguments:
                  - name: handler
                    type: Function
                    desc: 不传入任何参数
                return: undefined
                desc: >
                  <p>主要进行事件委派等与 DOM 加载进程无关的操作。会在调用 <code>Tatami.sandbox</code> 时执行。</p>
                demo: >
                  Tatami.prepare(function() {
                    // Do sth.
                  });
          - func: ready
            desc: >
              <p>添加需要在 <code>DOMContentLoaded</code> 之后调用的处理函数</p>
            invoke:
              - statement: 'Tatami.ready(handler)'
                arguments:
                  - name: handler
                    type: Function
                    desc: 不传入任何参数
                return: undefined
                desc: >
                  <p>会在调用 <code>Tatami.sandbox</code> 时执行。</p>
                demo: >
                  Tatami.ready(function() {
                    // Do sth.
                  });
          - func: sandbox
            desc: >
              <p>启动封闭运行环境</p>
            invoke:
              - statement: 'Tatami.sandbox([settings])'
                arguments:
                  - name: settings
                    type: Object
                    desc: 系统配置参数
                return: Object / Boolean
                desc: >
                  <p>通过 <code>Tatami.prepare</code> 和 <code>Tatami.ready</code> 加入到队列中的函数只有在调用该方法时才执行。每个页面只能调用一次。返回（修改后的）系统配置参数。</p>
                demo: >
                  // 未传参数时返回默认配置

                  Tatami.sandbox();

                  => Object {debug: true, platform: "", locale: "zh-CN", lang: "zh", api: ""}


                  // 返回修改后的配置

                  Tatami.sandbox({api: "v1", platform: "Tatami", version: "0.1.0"});

                  => Object {debug: true, platform: "Tatami", locale: "zh-CN", lang: "zh", api: "v1", version: "0.1.0"}


                  // 第二次调用

                  Tatami.sandbox({invoke_time: 2});

                  => false
      - name: 其他
        flag: other
        apis:
          - func: queue
            desc: >
              <p>将外部处理函数引入到沙盒中。</p>
            invoke:
              - statement: 'Tatami.queue(funcList)'
                arguments:
                  - name: funcList
                    type: Object
                return: undefined
                desc: 
                demo:
              - statement: 'Tatami.queue(funcName, handler)'
                arguments:
                  - name: funcName
                    type: String
                  - name: handler
                    type: Function
                return: Function
                desc: 
                demo:
              - statement: 'Tatami.queue(funcName)'
                arguments:
                  - name: funcName
                    type: String
                return: Function
                desc: 
                demo:
              - statement: 'Tatami.queue()'
                return: Object
                desc: 
                demo:
          - func: run
            desc: >
              <p>执行指定函数。</p>
            invoke:
              - statement: 'Tatami.run(funcName)'
                arguments:
                  - name: funcName
                    type: String
                return: 
                desc: 
                demo:
              - statement: 'Tatami.run(funcNameList)'
                arguments:
                  - name: funcNameList
                    type: Array
                return: undefined
                desc: 
                demo:
          - func: config
            desc: >
              <p>获取系统信息。</p>
            invoke:
              - statement: 'Tatami.config([key])'
                arguments:
                  - name: key
                    type: String
                return: 
                desc: 
                demo:
          - func: init
            desc: >
              <p>设置初始化信息。</p>
            invoke:
              - statement: 'Tatami.init(settings)'
                arguments:
                  - name: settings
                    type: Object
                return: 
                desc: 
                demo:
              - statement: 'Tatami.init(function, key)'
                arguments:
                  - name: function
                    type: Function
                  - name: key
                    type: String
                return: 
                desc: 
                demo:
          - func: data
            desc: >
              <p>获取 DOM 的「data-*」属性集或存储数据到内部/从内部获取数据。</p>
            invoke:
              - statement: 'Tatami.data(node)'
                arguments:
                  - name: node
                    type: DOM
                return: Object
                desc: 
                demo:
              - statement: 'Tatami.data(key, data[, lock])'
                arguments:
                  - name: key
                    type: String
                  - name: data
                    type: 
                  - name: lock
                    type: Boolean
                return: 
                desc: 
                demo:
              - statement: 'Tatami.data(key)'
                arguments:
                  - name: key
                    type: String
                return: 
                desc: 
                demo:
          - func: i18n
            desc: >
              <p>设置及获取国际化信息。</p>
            invoke:
              - statement: 'Tatami.i18n(settings)'
                arguments:
                  - name: settings
                    type: Object
                return: undefined
                desc: 
                demo:
              - statement: 'Tatami.i18n(key[, params])'
                arguments:
                  - name: key
                    type: String
                  - name: params
                    type: Object
                return: String
                desc: 
                demo:
          - func: api
            desc: >
              <p>设置及获取 Web API。</p>
            invoke:
              - statement: 'Tatami.api(settings)'
                arguments:
                  - name: settings
                    type: Object
                return: undefined
                desc: 
                demo:
              - statement: 'Tatami.api(key[, params])'
                arguments:
                  - name: key
                    type: String
                  - name: params
                    type: Object
                return: String
                desc: 
                demo:
          - func: route
            desc: >
              <p>设置及获取页面 URL。</p>
            invoke:
              - statement: 'Tatami.route(settings)'
                arguments:
                  - name: settings
                    type: Object
                return: undefined
                desc: 
                demo:
              - statement: 'Tatami.route(key[, params])'
                arguments:
                  - name: key
                    type: String
                  - name: params
                    type: Object
                return: String
                desc: 
                demo:
          - func: asset
            desc: >
              <p>设置及获取资源 URL。</p>
            invoke:
              - statement: 'Tatami.asset(settings)'
                arguments:
                  - name: settings
                    type: Object
                return: undefined
                desc: 
                demo:
              - statement: 'Tatami.asset(key[, params])'
                arguments:
                  - name: key
                    type: String
                  - name: params
                    type: Object
                return: String
                desc: 
                demo:
          - func: ajax
            desc: >
              <p>Asynchronous JavaScript and XML</p>
            invoke:
              - statement: 'Tatami.ajax(url[, succeed][, fail])'
                arguments:
                  - name: url
                    type: String
                  - name: succeed
                    type: Function
                  - name: fail
                    type: Function
                return: Object
                desc: 
                demo:
              - statement: 'Tatami.ajax(options[, succeed][, fail])'
                arguments:
                  - name: options
                    type: Object
                  - name: succeed
                    type: Function
                  - name: fail
                    type: Function
                return: Object
                desc: 
                demo:
          - func: sjax
            desc: >
              <p>Synchronous JavaScript and XML</p>
            invoke:
              - statement: 'Tatami.sjax(url[, succeed][, fail])'
                arguments:
                  - name: url
                    type: String
                  - name: succeed
                    type: Function
                  - name: fail
                    type: Function
                return: Object
                desc: 
                demo:
              - statement: 'Tatami.sjax(options[, succeed][, fail])'
                arguments:
                  - name: options
                    type: Object
                  - name: succeed
                    type: Function
                  - name: fail
                    type: Function
                return: Object
                desc: 
                demo:
          - func: save
            desc: >
              <p>将数据保存到本地。</p>
            invoke:
              - statement: 'Tatami.save(key, data)'
                arguments:
                  - name: key
                    type: String
                  - name: data
                    type: 
                return: undefined
                desc: 
                demo:
          - func: access
            desc: >
              <p>访问保存到本地的数据。</p>
            invoke:
              - statement: 'Tatami.access(key)'
                arguments:
                  - name: key
                    type: String
                return: 
                desc: 
                demo:
          - func: pathname
            desc: >
              <p>获取 URL 中的 pathname 部分。</p>
            invoke:
              - statement: 'Tatami.pathname(url)'
                arguments:
                  - name: url
                    type: String
                return: String
                desc: 
                demo:
          - func: alert
            desc: >
              <p>自定义警告提示框</p>
            invoke:
              - statement: 'Tatami.alert(message[, callback])'
                arguments:
                  - name: message
                    type: String
                  - name: callback
                    type: Function
                return: Boolean
                desc: 
                demo:
          - func: confirm
            desc: >
              <p>自定义确认提示框（两个按钮）</p>
            invoke:
              - statement: 'Tatami.confirm(message[, okCallback][, cancelCallback])'
                arguments:
                  - name: message
                    type: String
                  - name: okCallback
                    type: Function
                  - name: cancelCallback
                    type: Function
                return: Boolean
                desc: 
                demo:
          - func: confirmEX
            desc: >
              <p>自定义确认提示框（三个按钮）</p>
            invoke:
              - statement: 'Tatami.confirmEX(message[, yesCallback][, noCallback])'
                arguments:
                  - name: message
                    type: String
                  - name: yesCallback
                    type: Function
                  - name: noCallback
                    type: Function
                return: 
                desc: 
                demo:
          - func: url
            desc: >
              <p></p>
            invoke:
              - statement: 'Tatami.url()'
                return: Object
                desc: 
                demo:
          - func: download
            desc: >
              <p></p>
            invoke:
              - statement: 'Tatami.download(url[, fileName])'
                arguments:
                  - name: url
                    type: String
                  - name: fileName
                    type: String
                return: undefined
                desc: 
                demo:
          - func: functionExists
            desc: >
              <p>检测指定函数是否已经定义过。</p>
            invoke:
              - statement: 'Tatami.functionExists(funcName[, isWindow])'
                arguments:
                  - name: funcName
                    type: String
                  - name: isWindow
                    type: Boolean
                return: Boolean
                desc: >
                  <p>默认从 Tatami 内部的函数列表中查找 <code>funcName</code>，若 <code>isWindow</code> 设置为 <code>true</code>，则从 <code>window</code> 对象上找。</p>
                demo: >
                  Tatami.queue("foo", function() {});

                  Tatami.functionExists("foo");

                  => true


                  function bar() {}

                  Tatami.functionExists("bar", true);

                  => true

          # - func: encodeEntities
          #   desc: >
          #     <p>将字符串中的一些字符转换为实体。</p>
          #   invoke:
          #     - statement: 'Tatami.encodeEntities(target)'
          #       arguments:
          #         - name: target
          #           type: String
          #       return: String
          #       desc: 
          #       demo:
