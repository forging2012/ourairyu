<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.0.3">Jekyll</generator><link href="http://ourai.github.io/atom.xml" rel="self" type="application/atom+xml" /><link href="http://ourai.github.io/" rel="alternate" type="text/html" /><updated>2016-03-09T00:46:30+08:00</updated><id>http://ourai.github.io/</id><title>欧雷流</title><subtitle>不走寻常路</subtitle><author><name>欧雷</name><email>ourairyu@gmail.com</email><uri>http://ourai.github.io/</uri></author><entry><title>去你的「正常」人生！</title><link href="http://ourai.github.io/posts/fucking-normal-life/" rel="alternate" type="text/html" title="去你的「正常」人生！" /><published>2016-03-07T23:21:19+08:00</published><updated>2016-03-07T23:21:19+08:00</updated><id>http://ourai.github.io/posts/fucking-normal-life</id><content type="html" xml:base="http://ourai.github.io/posts/fucking-normal-life/">&lt;p&gt;很久没写过跟「三观」相关的文章了。这两天好些事情在脑中纠缠，使我的心情又乱又烦。加上有些事情在心里压抑已久，想在此时借文字发泄一下，顺便将我一直以来的想法表露出来。也许以前提过，但这回是不避讳地、较为完整地进行阐述——有啥说啥，想怎么说，就怎么说！希望情绪不会乱了我的笔触，能够清晰表达我的观点——&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;The fucking normal life, GO TO HELL!!!&lt;/strong&gt;&lt;/p&gt;
  &lt;footer&gt;欧雷&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;性格特点&lt;/h2&gt;

&lt;p&gt;有多少人能够真的回答上来「我是谁」这个问题？这不仅考察了一个人对自己的认知，同时也证明了 TA 是不是一个爱思考的人——认识自己是认识其他事物、认识世界的基础，支支吾吾说不上自己是什么人的人，凭什么说自己是懂思考的人——连自己都不认识的人，就别谈什么「成功」了，平庸的人生是其该有的。&lt;/p&gt;

&lt;p&gt;我是一个 85 后，B 型血，双鱼座。说这些并不是想说自己思想行为跟年代、血型和星座有什么关系，但看那些性格描述的确有些许相似之处。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;极端&lt;/h3&gt;

&lt;p&gt;我是一个较为极端的人，用自己的话描述就是：身体里同时住着「天使」和「恶魔」。&lt;/p&gt;

&lt;p&gt;平时，虽然表面上看起来有点冷酷，但其实我是很友善的，内心充满热情。假如其他人真的有什么需要帮忙而向我求助，会很乐意去帮 TA，就算是跟我要钱也可以给。如果看到路边有死掉的小动物，尤其是鸟类、猫狗之类，我的心会很痛并且会感到鼻子一酸，条件允许的情况下还会就近挖个坑把它们埋起来。&lt;/p&gt;

&lt;p&gt;然而，当触碰到我的敏感点或我所厌恶的事情发生时，平时沉睡在体内的「恶魔」就会慢慢苏醒。虽然我会尽可能地去抑制它，但如果被持续刺激而导致最终觉醒的话，那时的我可以说已经失去了「人性」！什么伦理道德？什么骨肉亲情？什么这个那个？任何规则也无法阻止我发狂——估计那时双眼已经通红，真无法称为「人」了！&lt;/p&gt;

&lt;p&gt;想想觉得自己还是挺可怕的，真乃一头「温顺的野兽」！&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;霸道&lt;/h3&gt;

&lt;p&gt;有些时候，我担当规则的制定者或选择的决定者，理所当然希望相关人员听从自己的安排，若是有人表现出不配合，难免有点气急败坏。可是，我不是那种无法听取他人意见一意孤行的「独裁者」。如果不配合的人能够提出改善方案的建议的话，定会接纳；但不仅不配合，还提不出建设性意见，只是在那抱怨的人，就真的无法接受了——U can u up, no can no BB!!!&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;自我&lt;/h3&gt;

&lt;p&gt;「自我」是最容易被人误解的，因为与它的孪生兄弟「自私」长得实在是太像了，所以很多人都想当然地认为「自私」就是「自我」。&lt;/p&gt;

&lt;p&gt;我不管「自我」在宗教、哲学、心理学等的定义是什么，也不管它在心理学上与什么「本我」「超我」之间千丝万缕的关系，我只讲自己的理解——对自己的认知，对自己的认可。&lt;/p&gt;

&lt;p&gt;我是一个自我意识非常强烈的人，因此我叛逆、独立，有想法，追求自由，强调自己的独特性。为了自由，我可以舍弃一切，冲破任何束缚我的阻碍，哪怕是社会道德、骨肉亲情、凡尘人世。&lt;/p&gt;

&lt;p&gt;我在做任何事情的时候，第一考虑的是自己，不会去做对自己一点益处没有反而受损的事情，在自己的利益没受到损害的前提下再去考虑他人或集体的利益——这不同于世人所理解的「自私」。要归类的话，我是「个人主义」，而那种「自私」的人是「利己主义」。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;想法态度&lt;/h2&gt;

&lt;p&gt;性格不存在优劣，同样一个特点，在某些情形下是缺点，但表现在其他情形下就会是优点。所以，要多角度多方位地客观地看待一个人。&lt;/p&gt;

&lt;p&gt;性格对一个人的人生会产生重大影响，正所谓——&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;思想决定行为，行为决定习惯，习惯决定性格，&lt;strong&gt;性格决定命运&lt;/strong&gt;。&lt;/p&gt;
  &lt;footer&gt;某大师&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;我的性格特点决定了我绝对不会（完全）按照世俗常理出牌，它对我来说就像屎坛子一样持续不断地恶心我！&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;工作&lt;/h3&gt;

&lt;p&gt;刚毕业时，家里人希望我能留在家附近工作，连去哪都找人帮我安排好了。他们的用心，虽说不是完全，但在一定程度上能够理解。&lt;/p&gt;

&lt;p&gt;中国的大部分父母都是希望孩子能够留在身边，产生这种想法的原因，在我看来有两方面：一方面是不舍得自己的子女远行，在能看得到的地方安心也方便照顾；而另一方面，是他们自私地在生子女的时候就想着防老。&lt;/p&gt;

&lt;p&gt;他们安排的工作我一点都不喜欢，留在老家对我的人生和理想一点帮助都没有，在那根本就没有我能做的事情——如果顺从他们的决定，我的人生就被绑架了，生活肯定过得委屈，前途尽毁——我怎么可以允许这种事情发生？！于是我不顾他们的心情和反对，毅然决然地决定南下。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;活法&lt;/h3&gt;

&lt;p&gt;来到杭州之后，在自己的性格、环境等因素的共同作用下，渐渐形成了「爱自己，爱生活，爱他人」的人生哲学，核心思想就是「不让自己受委屈且尽可能惠及他人」。在这个思想的驱动下，那段时间里虽然是单身，但活得很是轻松快乐。&lt;/p&gt;

&lt;p&gt;那时，对结婚我是抱着随缘的态度——先有合适的女孩成为我的女友再说，时机成熟了就结婚。每当家人想要说起这方面事情，我都会用「也许不会结婚」「可能不要孩子」给他们洗脑，久而久之就不会再跟我说这些了。在中国买房这种事我是深恶痛绝的，曾立誓「&lt;a href=&quot;/posts/never-buy-a-house-in-china/&quot;&gt;绝不在中国买房&lt;/a&gt;」，买车就更没想过了。&lt;/p&gt;

&lt;p&gt;正因为中国男青年所头痛的三个问题我都不太在乎，自然心理负担没那么沉重，放开了心去感受生活、享受生活——每到阳光明媚的周末就会坐车去市区到处走走，品品美食，看看电影，赏赏风景，使我比很多杭州本地人都了解杭州的美食、道路以及历史文化；每逢假期就约上丨爷到其他城市去遛遛，拍拍照，装装逼，感受下异乡风情。&lt;/p&gt;

&lt;p&gt;基于同样的原因，花钱也比较「豪放」。只要在收入承受范围内，想买什么就买什么，想怎么花就怎么花，并让我养成了超前消费的观念。即使到了现在，我依然保持这个习惯，我认为只要控制得当，这是一个很好的消费方式。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;婚姻&lt;/h3&gt;

&lt;p&gt;婚姻是绝大部分人会经历的事情。&lt;/p&gt;

&lt;p&gt;在中国，婚姻就像是一生中所必须完成的任务一样，只要一大学毕业走向社会开始工作，就会有一堆人监视你，敦促你快点完成这个任务，还有下一个任务等着去做呢！&lt;/p&gt;

&lt;p&gt;我所理解的婚姻，是男女双方在精神上达到统一，具有共同的人生目标后在心中认定与自己度过余生的人就是 TA 了。虽然表面上是两个家族的结合，但实质是两个人的选择，婚姻只是对对方的承诺，结婚证只是一纸契约，皆可有可无。&lt;/p&gt;

&lt;p&gt;两年前的某天，闲来无事逛知乎看到上面有人问《&lt;a href=&quot;https://www.zhihu.com/question/22005961&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;婚姻的意义是什么？&lt;/a&gt;》，觉得那些回答的内容毫无新意，我略作思考后留下了&lt;a href=&quot;https://www.zhihu.com/question/22005961/answer/21037109&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;一段文字&lt;/a&gt;，其大致内容如下——&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;就算没结婚，该上床还能上床，该同居还是同居，结婚证不再是性行为的「通行证」；就算没结婚，生孩子也可以上户口并抚养长大，只不过会被罚点钱；就算结婚了，该出轨还是出轨，该约炮还会约炮，区区一个结婚证根本无法约束一个人的身体和精神。&lt;/p&gt;
  &lt;p&gt;综上所述，&lt;strong&gt;婚姻毫无意义&lt;/strong&gt;！&lt;/p&gt;
  &lt;footer&gt;欧雷&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;我在知乎回答中所说的「毫无意义」，是从大众对婚姻的认识的角度说的，婚姻对我来说还是有意义的，只不过它很简单——正如上文所说，是我对伴侣的承诺：「&lt;strong&gt;今生今世，你属于我，我属于你。我们互不背叛，互相扶持，平等相待，不离不弃，为了共同的人生目标去努力奋斗，一起分担艰难痛苦，分享快乐幸福。&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;中国结婚的形式，即使各地之间有所差异，但也是大同小异，都要叫上三姑六婆七大婶八大姨来举办酒席，还要邀请各个时期的同学朋友和新老邻居，恨不得把所有认识的人都找来。还有一个共通的地方，也是最重要的环节——收红包。&lt;/p&gt;

&lt;p&gt;就我个人而言，是很讨厌这种结婚形式的，原因如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;需要费时费力费钱费神去筹办相关事情；&lt;/li&gt;
  &lt;li&gt;过于形式化，不走心；&lt;/li&gt;
  &lt;li&gt;太特么功利了！&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我是追求精神上满足的人，非常厌恶这些形式化、表面化、功利性的事情，我理想中的「婚礼」绝不是这种！&lt;strong&gt;我想跟着老婆一起到处吃吃喝喝，看看没见过的风景并通过镜头记录下来；我想只请一些交心的朋友来一起分享我的喜悦和幸福，不需要他们给我什么钞票。&lt;/strong&gt;我曾问过家人和女友可不可以不办婚礼，他们的回答异常得一致：「那之前给出去的钱怎么办？」&lt;/p&gt;

&lt;p&gt;还能怎么办？如果一定要办，那就办咯！毕竟结婚不是我一个人的事情，要考虑一下其他人的想法和立场，能妥协的就妥协。如果只是我自己的事情，肯定不会管别人如何去说。&lt;/p&gt;

&lt;p&gt;很多人在完成了「婚姻」这个任务后，就立刻去做下一个任务——生小孩。我肯定不会，并且这是我无论如何也不会退让的事情！&lt;/p&gt;

&lt;p&gt;婚姻对我的意义不是那么大，我是不急着结婚的，这本应该是水到渠成的事情。之所以能够接受比预想的时间提前结婚，是因为我认为即使结婚了也不会产生比结婚前更大的束缚。然而，有孩子就不一样了！无论是思想上还是经济上，我都没有做好当爹的准备；更重要的是，他会在很大程度上束缚我，让我更加不能去做自己想做的事情，这是我无法接受的！对我来说孩子不是必须的，就像婚姻一样是锦上添花的东西。&lt;/p&gt;

&lt;p&gt;我所期望的婚后生活仍是自由的、轻松的。所谓的「轻松」，是指没有增添更多的压力，反而在某些方面的压力应该变小，甚至消失。既然各自的身份发生了变化，从「情侣」升级为了「夫妻」，就应该有「夫妻」该有的样子。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「夫妻」是一种为了共同的人生目标和利益而结合到一起的合作关系。&lt;/strong&gt;夫妻关系的关键就是和谐、和睦、稳定，如果不能保证这几点，关系破裂导致散伙也是迟早的事。所以在相处的过程中，为了关系的存续和目标的实现，应该摒弃一些因自己产生的不利于发展的因素。&lt;/p&gt;

&lt;p&gt;结婚后更要给对方私人空间，让 TA 能够有时间去学习知识，增长见识，扩展人脉，这样才有利于对方发展，有利于两人及两人关系的发展。如果因为对方跟异性相处或在跟朋友见面时长时间没有联系自己而生气，甚至是隔夜气，这种事情就没必要了吧？&lt;/p&gt;

&lt;p&gt;最后，关于晒娃，我只想问一句：「你们在发 TA 的照片时，有征求过 TA 的意见吗？」&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;自我评价&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;我就是这么一个很有想法和主见的叛逆青年&lt;/strong&gt;，即使随着年龄的增长和事态的发展也许思想和做法上会产生变化，但骨子里的东西是不会变掉的，「个性」「叛逆」「自由」是我不变的标签。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/20160307/night-of-shanghai-b4e695cedb09b526d93845a3e869ea163150591ead5efab9ff813a19869856ec.jpg&quot; alt=&quot;游荡在外滩&quot; /&gt;
  &lt;figcaption&gt;游荡在外滩&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;除了自己，谁也无法左右我的意志、选择和活法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;去你的「正常」人生！我就是我！！就要过「不正常」的人生！！！&lt;/strong&gt;&lt;/p&gt;</content><author><name>欧雷</name><email>ourairyu@gmail.com</email><uri>http://ourai.github.io/</uri></author><category term="philosophy-of-life" /><summary>很久没写过跟「三观」相关的文章了。这两天好些事情在脑中纠缠，使我的心情又乱又烦。加上有些事情在心里压抑已久，想在此时借文字发泄一下，顺便将我一直以来的想法表露出来。也许以前提过，但这回是不避讳地、较为完整地进行阐述——有啥说啥，想怎么说，就怎么说！希望情绪不会乱了我的笔触，能够清晰表达我的观点——</summary></entry><entry><title>如何调试一个页面</title><link href="http://ourai.github.io/posts/how-to-debug-a-web-page/" rel="alternate" type="text/html" title="如何调试一个页面" /><published>2016-03-05T11:57:23+08:00</published><updated>2016-03-05T11:57:23+08:00</updated><id>http://ourai.github.io/posts/how-to-debug-a-web-page</id><content type="html" xml:base="http://ourai.github.io/posts/how-to-debug-a-web-page/">&lt;p&gt;调试页面是前端开发中必不可少的一个环节，由于开发环境的多样性和终端种类越来越多，复杂度也在不断上升。&lt;/p&gt;

&lt;p&gt;我所写的这些只是万万千千方法中的几种，肯定有更优的方案，仅供参考。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本文中的一切操作皆在 Mac 中进行。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;域名绑定&lt;/h2&gt;

&lt;p&gt;用域名访问页面进行调试有很多益处，我就不一一列举了。所以，在进行调试之前需要先做下域名绑定。有的团队会由开发 leader 统一进行操作，而有的没有这个「杀必死」，那就只好自己来了。&lt;/p&gt;

&lt;h3 id=&quot;nginx-&quot;&gt;Nginx 跳转&lt;/h3&gt;

&lt;p&gt;如果已经安装了 Homebrew，在终端输入 &lt;code&gt;brew install nginx&lt;/code&gt; 来下载安装。&lt;/p&gt;

&lt;p&gt;进入到安装目录 &lt;code&gt;/usr/local/etc/nginx&lt;/code&gt; 修改 &lt;code&gt;nginx.conf&lt;/code&gt; 文件。&lt;strong&gt;只需要将下面参数添加进去，而不要把原来已有的删掉！&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://127.0.0.1:8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;终端输入 &lt;code&gt;nginx&lt;/code&gt; 启动服务。如果之前已经启动过，则需要输入 &lt;code&gt;nginx -s reload&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;ip-&quot;&gt;IP 映射&lt;/h3&gt;

&lt;p&gt;修改 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件，添加一行 &lt;code&gt;127.0.0.1  YOUR_DOMAIN&lt;/code&gt;。其中 &lt;code&gt;YOUR_DOMAIN&lt;/code&gt; 可以是任意符合域名命名规范的值。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;代理服务器&lt;/h2&gt;

&lt;p&gt;在跨环境、跨设备的调试场景中经常会需要用到代理服务器，我所使用的是基于 Node.js 的 &lt;a href=&quot;http://rehorn.github.io/livepool/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;LivePool&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;终端输入 &lt;code&gt;npm install -g livepool&lt;/code&gt; 进行全局安装，之后在任意位置输入 &lt;code&gt;livepool&lt;/code&gt; 就可以开启代理服务。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/20160305/start-livepool-52faeb8a8c7d4b995eb7041d18ec1a4bb5496d6958b8e53c84cc0bd72a4a71e9.jpg&quot; alt=&quot;启动 LivePool&quot; /&gt;
  &lt;figcaption&gt;启动 LivePool&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;LivePool 在运行时会在运行目录中生成规则和日志文件，建议新建一个 &lt;code&gt;livepool&lt;/code&gt; 文件夹专门用来运行。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;桌面端&lt;/h2&gt;

&lt;h3 id=&quot;section-3&quot;&gt;虚拟机中&lt;/h3&gt;

&lt;p&gt;因为 IE 版本的关系，最可靠的调试方式可能就是装虚拟机了，通过其他方式调试总会与用那个版本的真正的 IE 有所差别。&lt;/p&gt;

&lt;p&gt;Mac 中普遍使用的虚拟机是 VirtualBox，所以这里就拿它来说明。&lt;/p&gt;

&lt;p&gt;在虚拟机中打开 IE 浏览器，找到工具栏中的「工具」选项。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/20160305/vb-step-1-ab0bdaa35e0f66c23a10a10f59d6390183cc09be786c52aaa4489997733695eb.jpg&quot; alt=&quot;找到「Internet 选项」&quot; /&gt;
  &lt;figcaption&gt;找到「Internet 选项」&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;点击「Internet 选项」打开对话框并切换到「连接」选项卡，点击「局域网设置」。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/20160305/vb-step-2-d918905b9beace853fbd1e96c03d69f65d093f5416a353b9b58648fb3bc69304.jpg&quot; alt=&quot;点击「连接」选项卡中的「局域网设置」&quot; /&gt;
  &lt;figcaption&gt;点击「连接」选项卡中的「局域网设置」&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;查看宿主机器的 IP，可以在终端输入命令 &lt;code&gt;ifconfig | grep &quot;inet&quot;&lt;/code&gt;。还有一个更为简单方便的方法——按住 &lt;kbd&gt;option&lt;/kbd&gt; 键点击 &lt;i class=&quot;fa fa-wifi&quot;&gt;&lt;/i&gt; 图标。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/20160305/check-ip-0c5c5a6a88fc2036242f87972ea79e9578ee4759af7bc608d1c33e2d8f665534.jpg&quot; alt=&quot;快速查看宿主机器 IP&quot; /&gt;
  &lt;figcaption&gt;快速查看宿主机器 IP&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;选中「为 LAN 使用代理服务器」，然后填入宿主机器的 IP 和代理服务器的端口号（如果是 LivePool 的话，端口号为 8090）。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/20160305/vb-step-3-ce7f43c103f4bbea60b99479327d64569f31d1a91292187e342723d5ebefbed8.jpg&quot; alt=&quot;输入宿主机器 IP 和代理服务器端口号&quot; /&gt;
  &lt;figcaption&gt;输入宿主机器 IP 和代理服务器端口号&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;设置完代理服务器后，在浏览器地址栏输入自定义的域名即可访问本地网站了——&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/20160305/vb-step-4-ba8e6110314871640ba77d3c45f56c2aca814d29db994a641f3f68b0ce2833d8.jpg&quot; alt=&quot;访问本地网站&quot; /&gt;
  &lt;figcaption&gt;访问本地网站&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;section-4&quot;&gt;线上代码&lt;/h3&gt;

&lt;p&gt;要在本地调试已经上线的代码，需要用到文件映射功能。&lt;/p&gt;

&lt;p&gt;访问 &lt;code&gt;http://localhost:8002/&lt;/code&gt; 浏览 LivePool 的 UI 界面配置映射规则，将线上文件与本地文件建立关系。如此一来，请求线上文件的 URL 时真正访问的是本地文件的代码。（关于 UI 界面的使用方式及规则的配置方法请看 &lt;a href=&quot;http://rehorn.github.io/livepool/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;LivePool 的官方文档&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;除了需要配置映射规则外，也要对浏览器设置一下代理服务器。&lt;/p&gt;

&lt;p&gt;如果常用 Chrome 进行开发，并且不用调试其他浏览器中的效果的话，可以安装浏览器插件 &lt;a href=&quot;https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;Proxy SwitchyOmega&lt;/a&gt; 进行代理切换，这样很是方便。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/20160305/switchyomega-6a2526840b1d8cef5e08a9b82b2cc90d16fc52b5fe5fb67030c1ba463d91531c.png&quot; alt=&quot;Proxy SwitchyOmega 的配置界面&quot; /&gt;
  &lt;figcaption&gt;Proxy SwitchyOmega 的配置界面&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;想要调试其他浏览器的话，就得全局代理了。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;移动端&lt;/h2&gt;

&lt;h3 id=&quot;section-6&quot;&gt;模拟调试&lt;/h3&gt;

&lt;p&gt;在开发的初期阶段，可以先用桌面浏览器去模拟移动端的显示效果。虽然效果有所差异，但大部分现代浏览器都具备此功能。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;实机调试&lt;/h3&gt;

&lt;p&gt;在后期时间允许的情况下，为了保证质量，要实机测试一下是否存在致命问题。如果真的出现了问题，得连接到移动设备上进行调试。&lt;/p&gt;

&lt;p&gt;iOS 本身提供了与 Mac 联调的功能。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;微信浏览器&lt;/h3&gt;

&lt;p&gt;在微信浏览器中好好的页面总是会出现各种奇怪的问题——本应该被支持的选择器它没有支持，本能够正常工作的 JavaScript 代码发生了异常——它就像是 Windows 中的 IE6。&lt;/p&gt;

&lt;p&gt;还好腾讯官方提供了&lt;a href=&quot;http://blog.qqbrowser.cc&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;微信调试工具&lt;/a&gt;来辅助我们，不必瞎猫碰死耗子般地一行一行修改代码去排错。&lt;/p&gt;</content><author><name>欧雷</name><email>ourairyu@gmail.com</email><uri>http://ourai.github.io/</uri></author><category term="frontend-web-development" /><category term="mac-os" /><summary>调试页面是前端开发中必不可少的一个环节，由于开发环境的多样性和终端种类越来越多，复杂度也在不断上升。</summary></entry><entry><title>如何考评一名前端工程师？</title><link href="http://ourai.github.io/posts/how-to-evaluate-a-frontend-engineer/" rel="alternate" type="text/html" title="如何考评一名前端工程师？" /><published>2016-02-27T02:00:54+08:00</published><updated>2016-02-27T02:00:54+08:00</updated><id>http://ourai.github.io/posts/how-to-evaluate-a-frontend-engineer</id><content type="html" xml:base="http://ourai.github.io/posts/how-to-evaluate-a-frontend-engineer/">&lt;p&gt;本文标题的命名方式参考了芋头所写的《&lt;a href=&quot;http://www.html-js.com/article/2961&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;如何面试一名前端开发工程师？&lt;/a&gt;》。「考评」是「面试」的子集，是一个很重要的环节，如果谁打算做「前端工程师面试合集」的话，记得把我这篇文章收录进去哈，蛤蛤蛤蛤～&lt;/p&gt;

&lt;p&gt;「如何考评」这个词看起来「diǎo * 2」的。虽然标题看起来很有逼格，但对于我这种面试（他人）经验用一个手就能数出来的菜鸟来说，谈这个话题还为时过早。（我感到有看官貌似心里不满了：「那你说个 bird 啊！浪费老子时间和流量！我支付宝账号＊＊＊，打多少你看着办吧！」先别急嘛～）其实，本文的目的不在于讲具体如何去考评一个前端工程师的应聘者，而是想说一件事，我最近冒出的一个 idea——是一件应该没人去做的事情，是一个也许会震动业界的项目。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;面试之痛&lt;/h2&gt;

&lt;p&gt;一周有五天工作日，其过法在这周之前都是在写代码和喝咖啡（顺便休息一下）的来回切换中度过的；然而，本周加入了新的元素——面试。工作日的一半以上都有面试，每次在与应聘者见面之前我都会做一些准备：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;浏览简历并提取出可参考的信息记录到 Evernote 上；&lt;/li&gt;
  &lt;li&gt;提炼出简历给我的第一印象；&lt;/li&gt;
  &lt;li&gt;从「工头」（前端团队的 leader、初试面试官）那里了解并记录电面结果；&lt;/li&gt;
  &lt;li&gt;综合以上信息准备面试时的考评内容。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中，考评内容以表格的形式展现，方便在进行面试时及时将对应的结果填进去。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/20160227/evaluating-table-10bede2ca5c3e045d842b1649791146804bc6fa304ea927993a33800d39b1634.png&quot; alt=&quot;面试准备&quot; /&gt;
  &lt;figcaption&gt;面试准备&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;这个流程整体看起来还不错，但细化到每一步时就会发现一些问题——痛点。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;简历中的技能&lt;/h3&gt;

&lt;p&gt;在应聘者所投递的简历文件以及有些个人网站的在线「简历」页面中必有的一项是自己所掌握的技术、技能，这是体现职业价值的关键。&lt;/p&gt;

&lt;p&gt;因为职业的特殊性，招人单位常常会在招聘信息中这样描述：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;精通 HTML、CSS、JavaScript&lt;/li&gt;
  &lt;li&gt;熟悉 W3C 标准&lt;/li&gt;
  &lt;li&gt;了解 Backbone、Angular、React、Vue 等&lt;/li&gt;
  &lt;li&gt;有 jQuery UI、Bootstrap 等使用经验&lt;/li&gt;
  &lt;li&gt;能够使用 Sass、LESS 等&lt;/li&gt;
  &lt;li&gt;至少了解一种服务端语言，如 Java、PHP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;满眼的英文单词看得我头晕目眩，没办法，市场需求如此。既然这样，作为敲门砖的简历中如果没出现这些牛逼哄哄的单词，恐怕 HR 连鸟都不会鸟你一眼。这就给应聘者一个错觉，以为会得越多越好；同时也使得整个前端圈子都很浮躁，大部分人都在追着新的轮子后屁股跑，结果就是「熊瞎子掰苞米」。&lt;/p&gt;

&lt;p&gt;当然，不是说会的多不好，作为一个流弊的人，知识广度是必须的；也不是说去了解学习新技术有什么不对，一个合格的职业人，不会去盲目跟风。无论是企业想要的，还是职业道路越走越宽的，都是沉稳的，先在专业深度上达到一个境界再去拓展广度的人——写好「T」的竖，再去画横。&lt;/p&gt;

&lt;p&gt;这时，在简历中体现专业深度，也就是技术、技能的熟练度，就显得十分重要了。一般为以下几种表现形式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文字描述，如「熟练」「精通」；&lt;/li&gt;
  &lt;li&gt;数值化，如显示以「100」为封顶的数字；&lt;/li&gt;
  &lt;li&gt;等级化，如几颗星。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样又会造成一个问题，一些应聘者的简历中充满了「精通＊＊＊」——请收下我的膝盖！&lt;/p&gt;

&lt;p&gt;为了狂拽炫酷屌炸天和更加形象地传达出「我很牛逼」这个信息，我也会想在自己的网站上加入「技能熟练度」这个 feature，那么问题来了——如何客观地对自己的技术、技能熟练度评分，进而增加可信度？&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;面试题的设计&lt;/h3&gt;

&lt;p&gt;从简历中获取的信息是片面的，并且很可能掺了一些水分，所以才需要经验丰富的人通过交流来了解应聘者的实际情况，像珠宝鉴定师一样去甄别其是否为赝品，将其定级。&lt;/p&gt;

&lt;p&gt;要去考核应聘者，需要根据招聘需求和简历中的信息设计面试题。如果简历中明确说明「无任何移动端开发经验」，面试官还去考查其相关问题的掌握情况的话不就是「脱裤子放屁」了么？这不仅浪费彼此时间，还会被应聘者鄙视。&lt;/p&gt;

&lt;p&gt;为了避免上面所提到的尴尬情形，这就要求简历中的技能描述可信度高，省去面试官去检验其可信度的步骤，而现状是不可能的！实际情况是，不像会计等职业需要证件才能上岗，写代码的都是「无证从业」。记得前段时间 HR 跑到我们开发这边，好像是问有没有职业相关的证件，我心里在想：「你是在说全国计算机等级考试么？」&lt;/p&gt;

&lt;p&gt;既然不可避免，不得不额外设计一些基础、原理方面的面试题去验证。自己去想实在是麻烦耗时，「懒惰」的我们会从网上找一些来作为参考。GitHub 上有很多类型的项目容易被 star，其中之一就是面试题——不仅面试官会用，应聘者也需要用。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/20160227/interview-questions-4f2a2126424693a73bb54dad8250c3701d464eb938ba62bd73cd33902aacb964.png&quot; alt=&quot;Front-end Job Interview Questions&quot; /&gt;
  &lt;figcaption&gt;Front-end Job Interview Questions&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;然而这种方式还有很多不便，如：量少、不能搜索、不能根据需要创建集合、没有分值等等。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;寻找良方&lt;/h2&gt;

&lt;p&gt;作为应聘者，没有一个合适的方式来评估我的专业度、熟练度，痛！作为面试官，没有一个帮助我快速有效地选取组织面试题的解决方案，痛！一般而言，「痛点」就是需求，我的需求一定不只是我一个人的需求，有需求就有市场。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;不是银弹的子弹&lt;/h3&gt;

&lt;p&gt;作为一个总是瞎想的双鱼，脑中突然冒出了一个想法——我本人，甚至是整个业界（即前端圈子）需要一套考核标准、一个评价体系、一个海量题库；作为一名喜欢折腾的码农，想法一出现就立刻在 GitHub 上建了一个仓库——世上从来不缺有想法的人，缺的是将其付诸行动的人。&lt;/p&gt;

&lt;p&gt;从我第一次做面试官那天脑中出现雏形起，经过这几天面试经验的增加，以及公司内其他面试官所遇到的情况看来，我所想象中的项目是有价值的！&lt;/p&gt;

&lt;p&gt;关于项目的名字，简称叫「&lt;dfn&gt;&lt;abbr title=&quot;Front-end Knowledge &amp;amp; Skill Evaluating System&quot;&gt;FES&lt;/abbr&gt;&lt;/dfn&gt;」（发音 /ˈfɛs/），全名为「Front-end Knowledge &amp;amp; Skill Evaluating System」，中文名是「前端知识与技能考核评价体系/系统」（我说这是 Google 机翻你信么……）。不过，这只是暂定的名字。它不仅是一套标准、一个体系，还是一个系统、一个服务。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;你咋不上天呢&lt;/h3&gt;

&lt;p&gt;既然有了这么棒的想法，既然有了最初的行动，就应该有计划地进行下去！&lt;/p&gt;

&lt;p&gt;「FES」是一个非常庞大的，仅凭我一人之力无法完成的项目。&lt;strong&gt;它是一套标准，制定标准需要一个由一群业内权威人士组成的「标准化组织」；它是一个评价体系，完善的打分机制会对应聘者做出客观可信的能力评估；它是一个系统、一个服务，能够让面试官从海量题库中抽选试题打印出一份「面试考查表」。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上面只提到了「FES」的基本应用，它还具备更高级更有价值的玩儿法，这里就先不说了。并且，这些都是后话，还在天上飘着呢，再不来点儿接地气的，别人该说我是「理想主义者」了——变着法儿地说我只会说不会做么？&lt;/p&gt;

&lt;p&gt;行！那就说点儿实际的，披露一下大概的计划：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;先靠自己，像其他面试题集一样收集一些信息放到 &lt;a href=&quot;https://github.com/ourai/fes&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;GitHub&lt;/a&gt; 上；&lt;/li&gt;
  &lt;li&gt;开发网站的雏形，满足基本需求；&lt;/li&gt;
  &lt;li&gt;寻找具备同样志向和想法的志愿者及贡献者；&lt;/li&gt;
  &lt;li&gt;升级网站向理想更近一步；&lt;/li&gt;
  &lt;li&gt;推广网站，提高影响力，使其成为业界标杆。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;为了方便广大求职者和用人单位，为了业界的健康发展，需要大家的力量！&lt;/strong&gt;So…对于跟我有相同理念的你，只想说四个字——&lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#111;&amp;#117;&amp;#114;&amp;#097;&amp;#105;&amp;#114;&amp;#121;&amp;#117;&amp;#043;&amp;#102;&amp;#101;&amp;#115;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&lt;strong&gt;请！联！系！我！&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>欧雷</name><email>ourairyu@gmail.com</email><uri>http://ourai.github.io/</uri></author><category term="job" /><category term="interview" /><category term="frontend-engineer" /><category term="wonderful-idea" /><summary>本文标题的命名方式参考了芋头所写的《如何面试一名前端开发工程师？》。「考评」是「面试」的子集，是一个很重要的环节，如果谁打算做「前端工程师面试合集」的话，记得把我这篇文章收录进去哈，蛤蛤蛤蛤～</summary></entry><entry><title>记一次面试</title><link href="http://ourai.github.io/posts/first-interview-as-an-interviewer/" rel="alternate" type="text/html" title="记一次面试" /><published>2016-02-23T23:18:54+08:00</published><updated>2016-02-23T23:18:54+08:00</updated><id>http://ourai.github.io/posts/first-interview-as-an-interviewer</id><content type="html" xml:base="http://ourai.github.io/posts/first-interview-as-an-interviewer/">&lt;p&gt;其他行业不了解，但是对于互联网行业来说，年后是人员流动比较频繁的时期——有些小伙伴需要在其称呼中加个「前」，有些陌生人即将成为你今后一起奋斗的战友——也许，你就是其中一个。这是每个处在这个行业的公司所不可避免的事情，我们公司也是一样，已经习以为常。所以，在今年的这个时刻，我也要去面试。&lt;/p&gt;

&lt;p&gt;看到这里，肯定以为我才刚换工作没多久就又跳槽了吧？哈哈，才不是呢！;-P&lt;/p&gt;

&lt;p&gt;这次面试与以往不同。我的身份、立场转变了，不是作为面试者去应聘，而是作为面试官去考察！&lt;/p&gt;

&lt;p&gt;在刚听说要让我去当面试官时，虽然诚惶诚恐，但仍坦然接受——没有过做面试官的经验，担心自己做不好，有些紧张；在职业发展道路上，这么一天迟早会到来，只不过提前经历了。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;事前准备&lt;/h2&gt;

&lt;p&gt;上面让我这个不是 leader 的人去承担此任，在我看来是对我的信任和对我能力的肯定，不能辜负了他们，因此用了很久去了解和思考该如何进行我的第一次面试。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;想要什么样的人&lt;/h3&gt;

&lt;p&gt;在开始记录自己的想法之前，先看了下芋头写的《&lt;a href=&quot;http://www.html-js.com/article/2961&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;如何面试一名前端开发工程师？&lt;/a&gt;》，发现他所想的跟我很是吻合。&lt;/p&gt;

&lt;p&gt;虽然不是 leader，但作为团队的一员，我希望团队能够变得更加规范化，更加强大；同时，希望自己能够在一个积极向上的氛围中跟着团队一同成长。所以，我对即将加入团队成为共在一条船上的小伙伴有如下期望：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;能够编写语义化的页面；&lt;/li&gt;
  &lt;li&gt;有构建工具使用经验；&lt;/li&gt;
  &lt;li&gt;有技术热情；&lt;/li&gt;
  &lt;li&gt;对前端工程有一些了解；&lt;/li&gt;
  &lt;li&gt;有自己的技术博客和开源项目主页；&lt;/li&gt;
  &lt;li&gt;开放的思维；&lt;/li&gt;
  &lt;li&gt;知道如何解决问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然自己觉得这样写挺好的，但 leader 看了之后的评价是，「太笼统！」于是，我又对每个条目进行了细分，并列出具体的技术、库/框架和工具等信息（&lt;a href=&quot;/we-need-you/&quot;&gt;查看详情&lt;/a&gt;）。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;设计考察问题&lt;/h3&gt;

&lt;p&gt;今天的应聘者是一个大我几岁且有带团队经验的人。再看简历，上面写着使用过多种我都没怎么去接触的框架，紧张度立刻上升了几个等级——吓尿我了！要面试如此厉害的人，我真的是紧张得不要不要的，一点不敢怠慢！&lt;/p&gt;

&lt;p&gt;仔细地看了一两遍他的简历，将一些信息，如工作经历、工具掌握情况、第一印象和了解到的电话面试情况记录下来；对照期望点列出该考察的方向和具体的知识点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;专业知识
    &lt;ul&gt;
      &lt;li&gt;对「结构、表现、行为相分离」的理解&lt;/li&gt;
      &lt;li&gt;「前端三剑客」相关知识&lt;/li&gt;
      &lt;li&gt;「响应式网页」相关知识&lt;/li&gt;
      &lt;li&gt;移动端开发经验&lt;/li&gt;
      &lt;li&gt;浏览器工作原理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;前端工程
    &lt;ul&gt;
      &lt;li&gt;架构&lt;/li&gt;
      &lt;li&gt;开发与调试&lt;/li&gt;
      &lt;li&gt;测试&lt;/li&gt;
      &lt;li&gt;静态资源部署&lt;/li&gt;
      &lt;li&gt;构建工具的使用及开发&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;团队管理
    &lt;ul&gt;
      &lt;li&gt;代码版本控制&lt;/li&gt;
      &lt;li&gt;代码质量保证&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;其他方面
    &lt;ul&gt;
      &lt;li&gt;UI 组件的设计思想&lt;/li&gt;
      &lt;li&gt;对业界动态的关注度&lt;/li&gt;
      &lt;li&gt;解决问题的思路&lt;/li&gt;
      &lt;li&gt;是否有主动改善工作流程的意愿&lt;/li&gt;
      &lt;li&gt;团队协作能力&lt;/li&gt;
      &lt;li&gt;忠诚度&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;针对以上所列出的各个方面细化出了几十个点，虽然实际上用不了这么多。我认为只要对方不是圈内公认的专家，或多或少，都有必要考察一下基本功。&lt;/p&gt;

&lt;p&gt;除了这些理论、思想类的问题之外，还准备了两个实践类的问题留到最后：Sticky Footer 和固定的浮动栏。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;面试经过&lt;/h2&gt;

&lt;p&gt;约定的时间还没到，leader 的手机响了，真的是应聘者来了！他被接进办公楼，我知道是该换我出场的时候了！这小心脏就在那「咚咚」「咚咚」欢快地跳着，感觉像刚爬上山顶一样气喘……&lt;/p&gt;

&lt;p&gt;我穿上衣服，微笑着走过去说「泥嚎～」，把他带到了二楼的一间「小黑屋」。进去感到身上一股寒气，对他说了声「请坐」后打开灯和空调，入座开始面试。&lt;/p&gt;

&lt;p&gt;略微寒暄一下，按照以往被面试时的经历，让他先做下自我介绍。这时，我还是很紧张的，但在听过他的简介之后，我就恢复平常的状态了。&lt;/p&gt;

&lt;p&gt;从他的描述中得知，目前在一家外包公司工作。为了将话题引导到我要考察的点上，问了他技术偏好——是善用 HTML、CSS 的「页面重构工程师」，或是精通脚本的「JavaScript 开发工程师」，还是无所偏倚的「前端开发工程师」。他的回答是第三种，刚开始还以为与我一样。&lt;/p&gt;

&lt;p&gt;在考察基本功时，不是讲不明白就是「不会」「没研究过」……进行到 CSS 环节时我问了心一句：「你还想继续吗？」它本来是想拒绝的，但考虑到我是第一次面试别人，并且对方是个 leader，就继续了。&lt;/p&gt;

&lt;p&gt;当考察对「如何实现类的继承」的掌握情况时，他显得不耐烦了，脸上露出一种表情：「你问得有点细了吧？这样到半夜也不会完啊！」我也真是说不出话来了，搞得像我愿意问那么多似的！&lt;/p&gt;

&lt;p&gt;再简单问了一下前端工程和团队管理方面的，果然没有任何一方面是有亮点的。我也真的不想往下继续了，把他送出了办公楼。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;事后总结&lt;/h2&gt;

&lt;p&gt;总的来说，我的第一次面试还算可以，没有很糟糕。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;对应聘者的评价&lt;/h3&gt;

&lt;p&gt;对于这个应聘者，我有点为他担忧。为什么呢？引用芋头的一句话——&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;前几天面过一个要价3W/m的技术，问他什么都一问三不知，年纪也熬的不小了，30多岁，但是真的是啥都不会，连刚毕业的大学生都比不过，我感觉他对自我的思考对技术的思考基本上是不断在倒退的状态，很难让人接受他。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;「优胜劣汰」是自然法则。在这次面试中被我淘汰了，是小事；如若没有借此经历幡然醒悟并痛下苦功而被社会所淘汰的话，是大事。感慨互联网行业，感慨这前端圈，变化莫测如激流中逆水行舟。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;如何面试别人&lt;/h3&gt;

&lt;p&gt;至此，我又多了一个身份——面试官。既然如此，就应该思考并总结出一套适合自己的面试别人的方法，以便今后能够尽可能精准地定位筛选应聘者，为企业引进合适的人才。&lt;/p&gt;

&lt;p&gt;首先，要摆正自己的心态。&lt;/p&gt;

&lt;p&gt;现在想想，之所以在面试前我一直很紧张、忐忑，这是我第一次面试是一部分原因，但更大的原因应该是被应聘者简历所体现的几个关键字给震慑住了——「8 年经验」「team leader」「用过很多框架」；在听完自我介绍聊了几句就淡定了下来则是因为我内心已经基本认定，「他并没有想象中那么厉害」。&lt;/p&gt;

&lt;p&gt;这种心态十分不好！我应该心里一直保持平静，无论对方的水平是强是弱，是比我好或是比我差，心中不应该起一丝涟漪。&lt;strong&gt;拥有多年工作经验就一定基础好？带过团队就一定懂管理？待过大公司就一定很牛逼？那可未必！这些都是刻板印象！&lt;/strong&gt;我必须消除脑中的这种观念，并克服自卑，才能够做到波澜不惊！&lt;/p&gt;

&lt;p&gt;其次，对应聘者要以礼相待。&lt;/p&gt;

&lt;p&gt;作为面试官，不管你愿不愿意，一举一动一言一行都代表着公司。（哦耶！终于有机会做代言人了！那么问题来了，代言费呢？？？）所以，就算是为了公司的形象和声誉，也得注意自己的举止态度。&lt;/p&gt;

&lt;p&gt;「泥嚎」「请坐」必不可少，接杯水端到面前会更显体贴；面试过程中要保持友好的表情、措辞和语气语调，有能力就活跃下气氛；如果面试结果不合格，尽量告诉其原因并给些建议，再将对方送出大门说声「再见」。&lt;/p&gt;

&lt;p&gt;最后，以最少的问题考察应聘者的匹配度。&lt;/p&gt;

&lt;p&gt;估计要达到这点，需要对应聘者的水平进行精准定位，对公司的期望和所能提供的薪酬十分了解，对自己的一些能力也有很高的要求。综上所言，现在的我还无法做到。&lt;/p&gt;

&lt;p&gt;接下来也许还会有几波面试。在考验别人的同时也是在考验自己，我要加油了！！！&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;如何选择公司&lt;/h3&gt;

&lt;p&gt;结合自己作为应聘者和面试官的经历，我觉得选择到什么样的公司去工作是一件需要万分谨慎的事情。进错公司毁一生，我不是在开玩笑！人性的弱点和环境的作用不可小觑！&lt;/p&gt;

&lt;p&gt;什么样的公司比较靠谱，不好说；什么样的公司不靠谱，目前看来应该是那种没有融资且开不出理想工资的公司，和外包公司。&lt;/p&gt;</content><author><name>欧雷</name><email>ourairyu@gmail.com</email><uri>http://ourai.github.io/</uri></author><category term="job" /><category term="interview" /><category term="frontend-engineer" /><summary>其他行业不了解，但是对于互联网行业来说，年后是人员流动比较频繁的时期——有些小伙伴需要在其称呼中加个「前」，有些陌生人即将成为你今后一起奋斗的战友——也许，你就是其中一个。这是每个处在这个行业的公司所不可避免的事情，我们公司也是一样，已经习以为常。所以，在今年的这个时刻，我也要去面试。</summary></entry><entry><title>前端工程优化之路</title><link href="http://ourai.github.io/posts/engineering-problems-of-frontend-development/" rel="alternate" type="text/html" title="前端工程优化之路" /><published>2016-02-04T16:35:36+08:00</published><updated>2016-02-04T16:35:36+08:00</updated><id>http://ourai.github.io/posts/engineering-problems-of-frontend-development</id><content type="html" xml:base="http://ourai.github.io/posts/engineering-problems-of-frontend-development/">&lt;p&gt;在我加入&lt;a href=&quot;https://www.maihaoche.com&quot; target=&quot;_blank&quot; rel=&quot;nofollow external&quot; class=&quot;Link Link--maihaoche&quot;&gt;买好车&lt;/a&gt;后第一次把项目代码从远程仓库拉取到本地时——「这是什么玩意？！」——我的内心是震惊并诧异的。&lt;/p&gt;

&lt;p&gt;为什么我会有如此反应？&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.maihaoche.com&quot; target=&quot;_blank&quot; rel=&quot;nofollow external&quot; class=&quot;Link Link--maihaoche&quot;&gt;买好车&lt;/a&gt;是一家具有阿里基因的公司，创始人和员工很多来自阿里。众所周知，阿里的技术是很不错的，基本每年都会主办一些技术会议，有些技术书籍也是阿里人著作或翻译的。因此，心理上会对他们在技术方面有较高的预期。然而，呈现在眼前的现实将我从幻想中拉了出来……&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;代码维护&lt;/h2&gt;

&lt;p&gt;不像大部分团队那样前后端代码放在一起维护，我们的项目代码是分开管理、维护的，即前后端代码不在同一个 Git 仓库当中。前端代码只有一个仓库，存放了公用资源、活动页、主站等不同业务线的代码，每个项目是一个目录；后端代码以项目为单位分为几个不同的仓库存放。部署上线也是分开进行。&lt;/p&gt;

&lt;p&gt;这种做法美其名曰「前后端分离」，实际到底是不是，值得思考。&lt;/p&gt;

&lt;h2 id=&quot;git-&quot;&gt;Git 的使用&lt;/h2&gt;

&lt;p&gt;团队在使用 Git 时主要存在两方面问题：分支管理策略和代码提交准则。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;分支管理策略&lt;/h3&gt;

&lt;p&gt;每次打开 SourceTree，首先映入眼帘的就是五颜六色的「彩虹线」——&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/20160204/git-graph-6eec0b8adf92423dd271d6ba65708099eec0a5c1bcc475bd4ac89e9df2285f96.png&quot; alt=&quot;提交记录图表&quot; style=&quot;max-width: 284px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;和好些过期的分支——&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.
└─┬─ origin
  ├─── dev_frontend
  ├─── dev_general
  ├─── dev_inquiry
  ├─── dev_maiche
  ├─── pub_20160111
  ├─── pub_20160112
  ├─── pub_20160113
  ├─── pub_20160114
  ├─── pub_20160128
  ├─── pub_20160202
  └─── ...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;看得我简直是头晕目眩，不知从何「编」起啊！&lt;/p&gt;

&lt;p&gt;造成这种情况的最直接的原因就是，没有一个好的分支管理策略。这里的分支管理策略是这样的：&lt;/p&gt;

&lt;p&gt;每周有两个固定的发布日，在每个发布日之前某个管理发布的测试工程师（是的，我们没有运维工程师）会基于 &lt;code&gt;master&lt;/code&gt; 分支创建前缀为 &lt;code&gt;pub_&lt;/code&gt; 的发布分支，在发布之前会将要发布的内容都汇总在这个分支上进行测试，通过后再合并到 &lt;code&gt;master&lt;/code&gt; 分支上进行发布。然而，发布完不会立刻将那个分支删掉，而是要保留几个星期以避免出问题。这样就会像上图中那样有好多过期的分支留在那里。&lt;/p&gt;

&lt;p&gt;有些不是立刻发布的内容，后端工程师们就会自己基于 &lt;code&gt;master&lt;/code&gt; 分支创建出 &lt;code&gt;dev_&lt;/code&gt; 为前缀的分支来开发新内容。&lt;/p&gt;

&lt;p&gt;虽然他们在创建分支时都是有一定的规则，但这种做法产生了一些「垃圾」分支，以及使 &lt;code&gt;master&lt;/code&gt; 分支看起来不那么稳定，像定时炸弹一样随时会「嘭」！&lt;/p&gt;

&lt;p&gt;我觉得团队中应该采用 Git Flow 来管理分支，这是一个不知经过多少团队验证的分支模型，我有信心它能够应对我们团队所遇到的各种场景。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;代码提交准则&lt;/h3&gt;

&lt;p&gt;我们团队的 Git 提交记录很「简单」，要么写着几个简单的字母或词语，要么就是合并分支时生成的节点，一眼望去根本不知道那些人到底做了什么。这如果是想查找某个功能点的更改记录，得逐个节点去分析。&lt;/p&gt;

&lt;p&gt;在使用 Git 时应该遵守一个基本原则——使提交记录尽可能简洁详细，看它就像读一本书。要达到这种效果，只需牢记几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;控制提交粒度；&lt;/li&gt;
  &lt;li&gt;填好提交信息；&lt;/li&gt;
  &lt;li&gt;调节推送频率；&lt;/li&gt;
  &lt;li&gt;多衍合少合并。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要使每个提交都具有意义，粒度最好控制为一个小 feature 或者一个 bug fix，这样进行恢复等操作时能够将「误伤」减到最低。&lt;/p&gt;

&lt;p&gt;一个好的提交信息是，用一句简练的话写在第一行，然后空一行略微详细地阐述该提交所增加或修改的地方：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Redirect user to the requested page after login

https://trello.com/path/to/relevant/card

Users were being redirected to the home page after login, which is less
useful than redirecting to the page they had originally requested before
being redirected to the login form.

* Store requested path in a session variable
* Redirect to the stored location after successfully logging in the user&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;不要每提交一次就推送一次，多积攒几个提交后一次性推送，这样可以避免前一个提交后发现代码中还有小错误，这时可以通过衍合进行提交的合并或者信息修改。&lt;/p&gt;

&lt;p&gt;为了保持图表清晰和代码完整性，要掌握好提交和推送操作的时机——&lt;/p&gt;

&lt;p&gt;还没有推送到远程仓库时，如无必要则只提交不要推送，只在需要与他人配合开发时再推送。当所在分支已经完成职责时，需将父级分支的代码衍合到当前分支（得先保证父级分支在本地是最新的），然后合并至父级分支并删除当前分支。理想情况是，&lt;strong&gt;这个分支的整个生命周期没有进行过一次推送操作&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;当已经推送到远程仓库时，先积累几个提交的内容而不去做提交操作，等到要推送时先拉取代码到本地，然后按照上述粒度做几次提交，再推送到远程服务器。这种操作流程能够有效避免因代码冲突而造成的提交丢失等意想不到的问题，以及减少因合并产生的提交节点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/20160204/git-merge-8f2b38826e2d744d52b3d5bccfbf3b5e2e2ac0cbdf0ca6bfd42d6e09c690fbfb.png&quot; alt=&quot;合并分支产生的节点&quot; style=&quot;max-width: 280px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;扩展阅读&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot; target=&quot;_blank&quot; rel=&quot;nofollow external&quot;&gt;A successful Git branching model&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message&quot; target=&quot;_blank&quot; rel=&quot;nofollow external&quot;&gt;5 Useful Tips For A Better Commit Message&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chris.beams.io/posts/git-commit/&quot; target=&quot;_blank&quot; rel=&quot;nofollow external&quot;&gt;How to Write a Git Commit Message&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;前端工程&lt;/h2&gt;

&lt;p&gt;与整个技术团队相比，前端团队中所存在的问题更多更为严重！基本可以概括为以下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Git 仓库混杂了很多不同的业务；&lt;/li&gt;
  &lt;li&gt;源代码复用性低；&lt;/li&gt;
  &lt;li&gt;没有合理使用构建工具；&lt;/li&gt;
  &lt;li&gt;静态资源文件的发布流程繁琐；&lt;/li&gt;
  &lt;li&gt;活动页面的编写方式麻烦，并且对搜索引擎不友好。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我作为一名前端工程师，虽然暂时无法去对整个技术团队做些什么，但是作为前端团队的一员，却可以在前端团队中做些力所能及的事情。在我看来，「有问题」就代表着「机遇」，该是我大展拳脚的时候了！想起来都觉得肾上腺素大量分泌，热血沸腾！&lt;/p&gt;

&lt;p&gt;那么，我该做些什么呢？&lt;/p&gt;

&lt;p&gt;我所想到的能够提高前端团队工作效率和生产力的手段有：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;制定编码及文件存放等的规范和约定；&lt;/li&gt;
  &lt;li&gt;选择高效的语言编写源码；&lt;/li&gt;
  &lt;li&gt;选择合适的自动化工具；&lt;/li&gt;
  &lt;li&gt;保证以上几条顺利执行的措施。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为了提高前端团队的整体素质和实力，需要做的事情还有很多。想要完成这些不是一朝一夕的事情，前端工程优化之路任重而道远啊……&lt;/p&gt;

&lt;p&gt;想在已有的项目上进行改造会存在着很大的阻力，幸好这时公司业务拓展要开发新项目。决定从这新的项目着手，小试牛刀，总结出一套方案后推行整改到其他项目。&lt;/p&gt;

&lt;p&gt;以本文为引，往后会写几篇关于我们前端团队建设的文章，敬请期待！&lt;/p&gt;</content><author><name>欧雷</name><email>ourairyu@gmail.com</email><uri>http://ourai.github.io/</uri></author><category term="frontend-web-development" /><category term="software-engineering" /><category term="frontend-engineering" /><category term="maihaoche" /><summary>在我加入买好车后第一次把项目代码从远程仓库拉取到本地时——「这是什么玩意？！」——我的内心是震惊并诧异的。</summary></entry><entry><title>嘿！土好吃吗？</title><link href="http://ourai.github.io/posts/need-to-learn-investing/" rel="alternate" type="text/html" title="嘿！土好吃吗？" /><published>2015-11-23T05:26:21+08:00</published><updated>2015-11-23T05:26:21+08:00</updated><id>http://ourai.github.io/posts/need-to-learn-investing</id><content type="html" xml:base="http://ourai.github.io/posts/need-to-learn-investing/">&lt;p&gt;夜深人静之时，「叮」一声，手机屏亮了。还以为谁会这么晚找我，一看发件人「招商银行信用卡」，原来是我刚刚的付款通知——海淘了两件外套和一个电脑包中包，又一千多软妹币没了……&lt;/p&gt;

&lt;p&gt;发信息给我的微信好友中，除了女票，最多的恐怕就是小招童鞋了。他成天在我耳边说：「嘿，欧雷童鞋！你又欠了我＊＊＊元哦！」叨逼叨，叨逼叨，耳朵都要起茧子了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/20151123/boring-0de1164ca37b18222d29be3f53e66e1b9a0c4d1b920206e0d0851a34476cab23.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不过想想，他也是好意，提醒我最近花钱如流水，再不剁手就小命不保了，地球的土都已经不够我吃了……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/20151123/dilutedness-92ce00a6fa60bfd417b1d1b5167e567373c349decc9473f80e958499aca60bd4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虽然 10 月份刚开始没多久就花了些钱网购，但大额的频繁购物还要从 20 日那天说起。那是一个较特殊的日子——小牛 N1 智能电动车再次发售。在那大概一个月前，同事中有人想抢购此车，因为它是小米式的饥饿营销模式。以之为契机，我知道了这个产品，并从官网上了解了一下信息，当时并没什么想法。&lt;/p&gt;

&lt;p&gt;然而，在那一个月期间，感到上班乘公交太挤且有时等车过久，下班打车费钱还难叫到车，再加上在女票家骑电动车有点上瘾了，于是迫切希望入手一辆！再三考虑并与女票协商后经她同意，决定参加这一次的抢购活动。在舍弃午饭用三个浏览器开了几十个网页等了一个多小时困得意识模糊之际，看到了页面提醒——我抢到了！一辆红色的动力版！算邮费五千多元，这绝对算得上是国内市场中最贵的电动车了！选择小牛，主要是因为它的高颜值，其次是速度快、续航久，然后是有对应的 APP 检测查看车况。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/20151123/niu-e468b6060a88cf2355c24c3990089d6b14b28228816a0b171dbf741bdba37c51.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以此为起点，这一个多月里我进行了很多「败家」行为，虽然自己认为这些钱都是必花的。先上一个表格来大概地理下从 10 月初到现在的网购开销——&lt;/p&gt;

&lt;table class=&quot;table table-bordered&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;日期&lt;/th&gt;
      &lt;th&gt;物品&lt;/th&gt;
      &lt;th&gt;价格&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;10.03&lt;/td&gt;
      &lt;td&gt;JetDrive Lite 330&lt;/td&gt;
      &lt;td&gt;486&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.09&lt;/td&gt;
      &lt;td&gt;A4 包中包&lt;/td&gt;
      &lt;td&gt;155&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.20&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;小牛电动 N1 智能电动踏板车&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;5257（动力版 4999＋邮费 258）&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.25&lt;/td&gt;
      &lt;td&gt;《HTML5＋CSS3 网页设计入门必读（套装共 2 册）》&lt;/td&gt;
      &lt;td&gt;29.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《学习响应式设计》&lt;/td&gt;
      &lt;td&gt;55.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《移动优先＋响应式 Web 设计（套装共 2 册）》 x 2&lt;/td&gt;
      &lt;td&gt;37.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《成为技术领导者：掌握全面解决问题的方法》&lt;/td&gt;
      &lt;td&gt;53.8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《程序开发心理学（银年纪念版）》&lt;/td&gt;
      &lt;td&gt;61.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《HTTP 权威指南》&lt;/td&gt;
      &lt;td&gt;68.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.26&lt;/td&gt;
      &lt;td&gt;Snugpak Sleeka Force 背包（35L，日本限定色）&lt;/td&gt;
      &lt;td&gt;846&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.27&lt;/td&gt;
      &lt;td&gt;《Web 信息架构：设计大型网站（第 3 版）》&lt;/td&gt;
      &lt;td&gt;71&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《高流量网站 CSS 开发技术》&lt;/td&gt;
      &lt;td&gt;56.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《RESTful Web APIs 中文版》&lt;/td&gt;
      &lt;td&gt;60&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《Web 性能权威指南》&lt;/td&gt;
      &lt;td&gt;51.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《数据结构与算法 JavaScript 描述》&lt;/td&gt;
      &lt;td&gt;37.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《Web 性能实践日志》&lt;/td&gt;
      &lt;td&gt;28.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.28&lt;/td&gt;
      &lt;td&gt;数码收纳包&lt;/td&gt;
      &lt;td&gt;98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.29&lt;/td&gt;
      &lt;td&gt;抱枕被 x 3&lt;/td&gt;
      &lt;td&gt;295.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;记忆枕&lt;/td&gt;
      &lt;td&gt;238&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11.01&lt;/td&gt;
      &lt;td&gt;雨衣（骑车用） x 2&lt;/td&gt;
      &lt;td&gt;109.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;头盔（骑车用）&lt;/td&gt;
      &lt;td&gt;174&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11.02&lt;/td&gt;
      &lt;td&gt;防风镜＋面具（骑车用）&lt;/td&gt;
      &lt;td&gt;180&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11.03&lt;/td&gt;
      &lt;td&gt;车贴&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11.04&lt;/td&gt;
      &lt;td&gt;《引爆点》&lt;/td&gt;
      &lt;td&gt;15（Kindle 版）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《疯传：让你的产品、思想、行为像病毒一样入侵》&lt;/td&gt;
      &lt;td&gt;25（Kindle 版）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《SEO 实战密码：60 天网站流量提高 20 倍（第 3 版）》&lt;/td&gt;
      &lt;td&gt;73&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11.05&lt;/td&gt;
      &lt;td&gt;鞋&lt;/td&gt;
      &lt;td&gt;219&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;电动车踏板垫&lt;/td&gt;
      &lt;td&gt;35&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11.10&lt;/td&gt;
      &lt;td&gt;Snugpak Berge 背包（100L）&lt;/td&gt;
      &lt;td&gt;1097.04&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11.11&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;iPad Pro WLAN 128GB&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;6888&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;iPad Pro Smart Cover&lt;/td&gt;
      &lt;td&gt;438&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11.16&lt;/td&gt;
      &lt;td&gt;《乌合之众》&lt;/td&gt;
      &lt;td&gt;7.99（Kindle 版）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《语言本能》＋《思想本质》&lt;/td&gt;
      &lt;td&gt;167.41&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11.17&lt;/td&gt;
      &lt;td&gt;iPad Pro 硅胶保护壳&lt;/td&gt;
      &lt;td&gt;598&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Apple Pencil&lt;/td&gt;
      &lt;td&gt;728&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《社会性动物（第 9 版）》&lt;/td&gt;
      &lt;td&gt;33.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《暗时间》&lt;/td&gt;
      &lt;td&gt;25.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《构建之法：现代软件工程（第 2 版）》&lt;/td&gt;
      &lt;td&gt;51.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11.18&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;iPhone 6s 64GB&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;6088&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11.22&lt;/td&gt;
      &lt;td&gt;POWER TO THE PEOPLE 外套 x 2&lt;/td&gt;
      &lt;td&gt;970（未算邮费）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;ELECOM 13.3 英寸电脑包中包&lt;/td&gt;
      &lt;td&gt;136（未算邮费）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;iPhone 手机壳 x 2&lt;/td&gt;
      &lt;td&gt;52&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;《富爸爸穷爸爸》&lt;/td&gt;
      &lt;td&gt;6（Kindle 版）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;在用计算器从上到下相加时，看到数字跳动的感觉像是天猫「双十一」大屏幕交易额，然而我的心情和马云却截然不同——忐忑！看到计算结果，我简直是惊呆了……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/20151123/gross-f9361d2f981512e59d1c5b7c8cd61cd64a9b356ae22acb1e08e1831b90650ce8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这只是线上消费，算上线下的各种费用的话，总花费三万以上毫不夸张！我真的很佩服自己的消费能力，比女人还会花钱……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/20151123/perk-it-e08cd2e54683d2f4cd001657b1f34e2a5bf470415552c98410ac902819e6c354.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我没有乱花钱！我没有乱花钱！！我没有乱花钱！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/20151123/say-3-times-33a4b171cb595b8834e1de8bf5ab18dca5b54388f0de330a8be643d986aec244.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虽然这不到两个月的时间花了很多钱，虽然看起来我就是在装逼，但我真的，并没有！！！这一定要为自己洗白！&lt;/p&gt;

&lt;p&gt;整体来看，表中的消费主要归为以下几类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;电动车及相关用品&lt;/li&gt;
  &lt;li&gt;iPad Pro 和周边配件&lt;/li&gt;
  &lt;li&gt;背包与包中包&lt;/li&gt;
  &lt;li&gt;书籍&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;既然买了电动车，人身安全和车保养必然应当重视，头盔、防风镜、面罩、雨衣和踏板垫都属必需品；车贴虽不是必需的，但个性化对我来说还是挺重要的，越来越多骑小牛的，我可不想看起来跟他们一样！&lt;/p&gt;

&lt;p&gt;我已经有了 iPad Air 2，显然 iPad Pro 的大部分功能已经重合，没什么买的必要，然而它看视频和绘画的体验是 iPad Air 2 无法企及的；它的键盘输入体验很是不好，并且对我而言是个鸡肋，所以没有购入 Smart Keyboard。&lt;/p&gt;

&lt;p&gt;我的电脑背包容量才 20L 左右，没装啥东西就满了，因为陪女票回家或到外地游玩时需带些洗漱用品和换洗衣服，就买了个稍大些标明是「35L」的背包；又因为回老家时不想拖行李箱和托运，所以又买了一个 100L 的可拆卸大背包，但愿能够顺利上机；包中包就是为了能够合理利用背包空间而买的。&lt;/p&gt;

&lt;p&gt;书籍就不用说了，为了提高自己专业技能和扩展知识面，从而赚更多的钱提升生活品质，实现人生理想！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/20151123/winner-of-life-df009e764ed1b088c3818de5cd69a4a3602e87ff862090ad62e25f0838c3db83.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说了这么多，无非就是为自己的愚蠢行为找借口充正当理由。总体来说，我的消费观念是好的，前卫的，西方化的——用未来的钱来享受现在的生活（行为较为危险，请勿随便模仿）——正如铜板街 CEO 何俊在我们公司发布会上说的那样。然而，现在存在一些瑕疵，构成了「超前消费」的危险因素。我应该反思一下这些消费行为是不是有的是冲动消费性质的，可以尽量避免或者延后执行的？&lt;/p&gt;

&lt;p&gt;我的理财意识才萌芽不久，很遗憾；它在我还称得上「年轻」的时候萌芽了，很庆幸。只有在完善了自己的消费观念和培养了出色的理财投资能力之后，我才有可能住进 dream house，开上 dream car，过上 dream life！虽然我的梦想在大部分人眼中看来就是梦，但我有「现实扭曲力场」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/20151123/confidence-2f37a1fd8a9ce19ac923898bb975a0e82bb268a0e88c579b97e8be1f259955e2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（此处应有掌声……）&lt;/p&gt;</content><author><name>欧雷</name><email>ourairyu@gmail.com</email><uri>http://ourai.github.io/</uri></author><category term="consumption-concept" /><category term="financing" /><summary>夜深人静之时，「叮」一声，手机屏亮了。还以为谁会这么晚找我，一看发件人「招商银行信用卡」，原来是我刚刚的付款通知——海淘了两件外套和一个电脑包中包，又一千多软妹币没了……</summary></entry><entry><title>用 Git Hooks 进行自动部署</title><link href="http://ourai.github.io/posts/deployment-with-git-hooks/" rel="alternate" type="text/html" title="用 Git Hooks 进行自动部署" /><published>2015-10-10T01:29:38+08:00</published><updated>2015-10-10T01:29:38+08:00</updated><id>http://ourai.github.io/posts/deployment-with-git-hooks</id><content type="html" xml:base="http://ourai.github.io/posts/deployment-with-git-hooks/">&lt;p&gt;昨天开始接手开发公司前端团队的主页，在稍微修改点东西后推送到远程仓库想看下线上结果时发现并没有更改！询问一把手得知，居然还需要连接到服务器执行一下 &lt;code&gt;git pull&lt;/code&gt; 才行……对于我这种怕麻烦的人来说，简直不能忍！&lt;/p&gt;
&lt;p&gt;经过一番查找资料以及一顿折腾，终于让它能够自动跑起来了，真是高兴得我手舞足蹈啊！虽然弄了较长时间，在实践的过程中踩了点坑，但回过头来一看还是挺简单的。总的来说，就只是在服务器和本机都做一下配置。（这不废话么……）&lt;/p&gt;
&lt;p&gt;由于公司的服务器是 CentOS，我所使用的电脑是 Mac OS X，故本文内容是基于这两个系统环境所写。GUI 在给用户带来很多便利的同时也隐藏了一些不便，如：需要下载应用软件及在操作界面交互。鉴于本文的中心是「自动化」，所以一切操作都采用命令行——&lt;/p&gt;
&lt;section&gt;
  &lt;h2&gt;远程连接服务器&lt;/h2&gt;
  &lt;p&gt;在搭建环境的整个过程中，有很多步骤是需要连接到服务器进行的，然而在每次访问的时候都需要输入用户名和密码，就像逢年过节回家聚会都会被亲戚朋友询问「什么时候结婚呀」「何时抱小孩啊」。这就是为什么要把这步放到前面——在自己脑门上写上计划的结婚生子时间，省得他们总问！&lt;/p&gt;
  &lt;h3&gt;生成 SSH 密钥&lt;/h3&gt;
  &lt;p&gt;密钥是免登录连接服务器的通行证，有种刷脸通行的感觉。&lt;b&gt;如果本地已经存在并且不想另外生成的话，可以跳过此步。&lt;/b&gt;&lt;/p&gt;
  &lt;p&gt;&lt;code&gt;cd ~/.ssh&lt;/code&gt; 切换目录后用 &lt;code&gt;ssh-keygen -t rsa -C &quot;用于区分密钥的标识&quot;&lt;/code&gt; 生成一对具有相同名字的密钥（默认为 &lt;code&gt;id_rsa&lt;/code&gt; 和 &lt;code&gt;id_rsa.pub&lt;/code&gt;）：用于本地的私钥和用于服务器的公钥（有 &lt;code&gt;.pub&lt;/code&gt; 扩展名）。&lt;/p&gt;
  &lt;p&gt;如果私钥名字不是默认的话，需要手动加入到被「认证」的私钥列表中，否则每次连接服务器都会提示输入服务器的密码。在遇到了一些坑（文后有说明）后，我觉得设置 SSH config 最为靠谱！&lt;/p&gt;
  &lt;p&gt;编辑 &lt;code&gt;~/.ssh/config&lt;/code&gt; 文件（如果不存在则 &lt;code&gt;touch ~/.ssh/config&lt;/code&gt; 创建一下），添加以下内容：&lt;/p&gt;
  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;Host HOST_ALIAS                       &lt;span class=&quot;c&quot;&gt;# 用于 SSH 连接的别名，最好与 HostName 保持一致&lt;/span&gt;
  HostName SERVER_DOMAIN              &lt;span class=&quot;c&quot;&gt;# 服务器的域名或 IP 地址&lt;/span&gt;
  Port SERVER_PORT                    &lt;span class=&quot;c&quot;&gt;# 服务器的端口号，默认为 22，可选&lt;/span&gt;
  User SERVER_USER                    &lt;span class=&quot;c&quot;&gt;# 服务器的用户名&lt;/span&gt;
  PreferredAuthentications publickey
  IdentityFile ~/.ssh/PRIVATE_KEY     &lt;span class=&quot;c&quot;&gt;# 本机上存放的私钥路径&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
  &lt;h3&gt;服务器端认证&lt;/h3&gt;
  &lt;p&gt;先用 &lt;code&gt;pbcopy &amp;lt; ~/.ssh/PRIVATE_KEY.pub&lt;/code&gt; 将公钥复制到剪贴板；通过 &lt;code&gt;ssh USER@SERVER&lt;/code&gt; 访问服务器，这时会提示输入密码（它也许只有这么一次「询问」的机会）；成功登录后 &lt;code&gt;vim ~/.ssh/authorized_keys&lt;/code&gt;，在合适的位置 &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;V&lt;/kbd&gt; 并保存退出（同时 &lt;code&gt;exit&lt;/code&gt; 退出 SSH 连接）。&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
  &lt;h2&gt;配置 Git 仓库&lt;/h2&gt;
  &lt;h3&gt;创建服务器端仓库&lt;/h3&gt;
  &lt;p&gt;服务器上需要配置两个仓库，一个用于代码中转的远程仓库，一个用于用户访问的本地仓库。**这里的「远程仓库」并不等同于托管代码的「中央仓库」**，这两个仓库都是为了自动同步代码并部署网站而存在。&lt;/p&gt;
  &lt;p&gt;在存放远程仓库的目录中（假设是 &lt;code&gt;/home/USER/repos&lt;/code&gt;）执行 &lt;code&gt;git init --bare BRIDGE_REPO.git&lt;/code&gt; 会创建一个包含 Git 各种配置文件的「裸仓库」。&lt;/p&gt;
  &lt;p&gt;切换到存放用户所访问文件的目录（假设为 &lt;code&gt;/home/USER/www&lt;/code&gt;，如果不存在则在 &lt;code&gt;/home/USER&lt;/code&gt; 中执行 &lt;code&gt;mkdir www&lt;/code&gt;）：&lt;/p&gt;
  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git init
git remote add origin ~/repos/BRIDGE_REPO.git
git fetch
git checkout master
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
  &lt;h3&gt;配置 Git Hook&lt;/h3&gt;
  &lt;p&gt;将目录切换至 &lt;code&gt;/home/USER/repos/BRIDGE_REPO.git/hooks&lt;/code&gt;，用 &lt;code&gt;cp post-receive.sample post-receive&lt;/code&gt; 复制并重命名文件后用 &lt;code&gt;vim post-receive&lt;/code&gt; 修改。其内容大致如下：&lt;/p&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;GIT_DIR

&lt;span class=&quot;nv&quot;&gt;NowPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DeployPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../../www&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DeployPath&lt;/span&gt;
git pull origin master

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$NowPath&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
  &lt;p&gt;使用 &lt;code&gt;chmod +x post-receive&lt;/code&gt; 改变一下权限后，服务器端的配置就基本完成了。&lt;/p&gt;
  &lt;h3&gt;更新本机的仓库源&lt;/h3&gt;
  &lt;p&gt;在原有的（托管代码的）仓库上加入刚才所配置的服务器上的远程仓库的地址为源，以后往那个源推送代码后就会自动部署了。&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
  &lt;h2&gt;总结&lt;/h2&gt;
  &lt;p&gt;在搭建环境时并没有一帆风顺，磕磕绊绊遇到不少问题，虽然很多不值得一提，但有的点还是有记录并分享的价值的！&lt;/p&gt;
  &lt;h3&gt;SSH 私钥「认证」&lt;/h3&gt;
  &lt;p&gt;&lt;a href=&quot;http://segmentfault.com/q/1010000000835302/a-1020000000883441&quot; target=&quot;_blank&quot;&gt;将生成的私钥进行「认证」有不止一种方式&lt;/a&gt;，然而，起初我用的是最挫最不靠谱的 &lt;code&gt;ssh-add ~/.ssh/PRIVATE_KEY&lt;/code&gt;——只是在当前 session 有效，一重启就又会被「询问」了！&lt;/p&gt;
&lt;/section&gt;</content><author><name>欧雷</name><email>ourairyu@gmail.com</email><uri>http://ourai.github.io/</uri></author><category term="git" /><category term="deployment" /><category term="web-server" /><category term="linux" /><summary>昨天开始接手开发公司前端团队的主页，在稍微修改点东西后推送到远程仓库想看下线上结果时发现并没有更改！询问一把手得知，居然还需要连接到服务器执行一下 git pull 才行……对于我这种怕麻烦的人来说，简直不能忍！
经过一番查找资料以及一顿折腾，终于让它能够自动跑起来了，真是高兴得我手舞足蹈啊！虽然弄了较长时间，在实践的过程中踩了点坑，但回过头来一看还是挺简单的。总的来说，就只是在服务器和本机都做一下配置。（这不废话么……）
由于公司的服务器是 CentOS，我所使用的电脑是 Mac OS X，故本文内容是基于这两个系统环境所写。GUI 在给用户带来很多便利的同时也隐藏了一些不便，如：需要下载应用软件及在操作界面交互。鉴于本文的中心是「自动化」，所以一切操作都采用命令行——

  远程连接服务器
  在搭建环境的整个过程中，有很多步骤是需要连接到服务器进行的，然而在每次访问的时候都需要输入用户名和密码，就像逢年过节回家聚会都会被亲戚朋友询问「什么时候结婚呀」「何时抱小孩啊」。这就是为什么要把这步放到前面——在自己脑门上写上计划的结婚生子时间，省得他们总问！
  生成 SSH 密钥
  密钥是免登录连接服务器的通行证，有种刷脸通行的感觉。如果本地已经存在并且不想另外生成的话，可以跳过此步。
  cd ~/.ssh 切换目录后用 ssh-keygen -t rsa -C &quot;用于区分密钥的标识&quot; 生成一对具有相同名字的密钥（默认为 id_rsa 和 id_rsa.pub）：用于本地的私钥和用于服务器的公钥（有 .pub 扩展名）。
  如果私钥名字不是默认的话，需要手动加入到被「认证」的私钥列表中，否则每次连接服务器都会提示输入服务器的密码。在遇到了一些坑（文后有说明）后，我觉得设置 SSH config 最为靠谱！
  编辑 ~/.ssh/config 文件（如果不存在则 touch ~/.ssh/config 创建一下），添加以下内容：
  Host HOST_ALIAS                       # 用于 SSH 连接的别名，最好与 HostName 保持一致
  HostName SERVER_DOMAIN              # 服务器的域名或 IP 地址
  Port SERVER_PORT                    # 服务器的端口号，默认为 22，可选
  User SERVER_USER                    # 服务器的用户名
  PreferredAuthentications publickey
  IdentityFile ~/.ssh/PRIVATE_KEY     # 本机上存放的私钥路径
  
  服务器端认证
  先用 pbcopy &amp;lt; ~/.ssh/PRIVATE_KEY.pub 将公钥复制到剪贴板；通过 ssh USER@SERVER 访问服务器，这时会提示输入密码（它也许只有这么一次「询问」的机会）；成功登录后 vim ~/.ssh/authorized_keys，在合适的位置 cmd + V 并保存退出（同时 exit 退出 SSH 连接）。


  配置 Git 仓库
  创建服务器端仓库
  服务器上需要配置两个仓库，一个用于代码中转的远程仓库，一个用于用户访问的本地仓库。**这里的「远程仓库」并不等同于托管代码的「中央仓库」**，这两个仓库都是为了自动同步代码并部署网站而存在。
  在存放远程仓库的目录中（假设是 /home/USER/repos）执行 git init --bare BRIDGE_REPO.git 会创建一个包含 Git 各种配置文件的「裸仓库」。
  切换到存放用户所访问文件的目录（假设为 /home/USER/www，如果不存在则在 /home/USER 中执行 mkdir www）：
  git init
git remote add origin ~/repos/BRIDGE_REPO.git
git fetch
git checkout master
  
  配置 Git Hook
  将目录切换至 /home/USER/repos/BRIDGE_REPO.git/hooks，用 cp post-receive.sample post-receive 复制并重命名文件后用 vim post-receive 修改。其内容大致如下：</summary></entry><entry><title>当我想跳槽时，我在想什么？</title><link href="http://ourai.github.io/posts/why-do-i-wanna-quit/" rel="alternate" type="text/html" title="当我想跳槽时，我在想什么？" /><published>2015-08-17T23:57:00+08:00</published><updated>2015-08-17T23:57:00+08:00</updated><id>http://ourai.github.io/posts/why-do-i-wanna-quit</id><content type="html" xml:base="http://ourai.github.io/posts/why-do-i-wanna-quit/">&lt;p&gt;我们的干爹——马云，曾经说过：「员工的离职原因很多，只有两点最真实：1. 钱，没给到位；2. 心，委屈了。」&lt;/p&gt;

&lt;p&gt;现在所在的公司是我来杭州后的第二家公司，已经将近两年半。&lt;/p&gt;

&lt;p&gt;月初时，薪资结构有了些调整，主要的变动就是绩效奖金基数提高以及——终于 13 了！过几天收到工资条后才知道，然而并没有什么卵用！看了最后一栏的数字，我的心里在流液体，不知是透明的还是红色的……待了这么久，即使没有感情，也有汗水；没有功劳，也有苦劳吧？&lt;/p&gt;

&lt;p&gt;那周末，约丨爷出来聊天，没想到被他再来一记重锤——他买房了，并且自己付的首付！我深深地感受到现在我们之间的差距，其主要原因就是工资和年终福利，也就是公司。我不想继续被拉大距离，不然连朋友都没得做了！&lt;/p&gt;

&lt;p&gt;可以说，现在的公司是在我的看望下成长的。然而，时光飞逝，其业务并没什么长进，连市场都没打开。我是一个开发者，外行眼中的程序员，不是寻求安逸稳定的公务员；我是一个拥有多年经验的开发者，有理想，有追求。&lt;/p&gt;

&lt;p&gt;我想在自己的专业领域取得十足的发展，需要一个拥有牛人的技术氛围好的开发团队；我不仅要生存，还要进行生活的基础建设，需要一份不输于行业标准的薪资；虽然我不追求安逸稳定，但还是想只为一家公司鞠躬尽瘁，希望公司能够一直吸引我。&lt;/p&gt;

&lt;p&gt;然而，假如现在有那么一家满足我各种需求的公司摆在面前，我能为它做些什么呢？&lt;/p&gt;

&lt;p&gt;别的不清楚，倒是知道自己所具备的以下几个特点会为公司产生价值：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;求知欲，在感兴趣的事情上喜欢刨根问底；&lt;/li&gt;
  &lt;li&gt;上进心，完善自己的同时也能加强对工作上的一些事情；&lt;/li&gt;
  &lt;li&gt;整理癖，最喜欢收集并整理信息资料了；&lt;/li&gt;
  &lt;li&gt;（一定程度的）自知之明，虽然有的人觉得我「很厉害」，但我知道自己「尚需努力」。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一切，都是为了理想。&lt;/p&gt;</content><author><name>欧雷</name><email>ourairyu@gmail.com</email><uri>http://ourai.github.io/</uri></author><category term="resignation" /><summary>我们的干爹——马云，曾经说过：「员工的离职原因很多，只有两点最真实：1. 钱，没给到位；2. 心，委屈了。」</summary></entry><entry><title>在 Mac OS X 中搭建 Apache + PHP + MySQL 开发环境</title><link href="http://ourai.github.io/posts/apache-mysql-php-on-mac-os/" rel="alternate" type="text/html" title="在 Mac OS X 中搭建 Apache + PHP + MySQL 开发环境" /><published>2015-07-20T23:54:00+08:00</published><updated>2015-07-20T23:54:00+08:00</updated><id>http://ourai.github.io/posts/apache-mysql-php-on-mac-os</id><content type="html" xml:base="http://ourai.github.io/posts/apache-mysql-php-on-mac-os/">&lt;p&gt;我所使用的操作系统是 Mac OS X Yosemite，自带 Apache 和 PHP，所以不用安装，只需稍微修改一下配置文件即可。&lt;/p&gt;

&lt;h2 id=&quot;apache&quot;&gt;启动 Apache&lt;/h2&gt;

&lt;p&gt;打开终端，输入 &lt;code&gt;sudo apachectl start&lt;/code&gt; 后即可启动 Apache。访问 &lt;code&gt;http://localhost/&lt;/code&gt; 会看到 &lt;code&gt;It works!&lt;/code&gt; 字样。&lt;/p&gt;

&lt;h2 id=&quot;php&quot;&gt;启用 PHP&lt;/h2&gt;

&lt;p&gt;修改 &lt;code&gt;/etc/apache2/httpd.conf&lt;/code&gt; 文件的配置，将 &lt;code&gt;#LoadModule php5_module libexec/apache2/libphp5.so&lt;/code&gt; 前面的 &lt;code&gt;#&lt;/code&gt; 去掉后，在终端中输入 &lt;code&gt;sudo apachectl restart&lt;/code&gt; 重启 Apache 后 PHP 就能够正常使用了！&lt;/p&gt;

&lt;p&gt;不过，用默认的目录开发很是不方便，还好可以自定义工作目录。同样是在 &lt;code&gt;/etc/apache2/httpd.conf&lt;/code&gt; 文件中，将 &lt;code&gt;DocumentRoot &quot;/Library/WebServer/Documents&quot;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;Directory &quot;/Library/WebServer/Documents&quot;&amp;gt;&lt;/code&gt; 中引号内的路径改为自己的路径即可。新建一个 &lt;code&gt;index.php&lt;/code&gt; 文件，代码为 &lt;code&gt;&amp;lt;?php phpinfo(); ?&amp;gt;&lt;/code&gt;，用浏览器访问 &lt;code&gt;http://localhost/&lt;/code&gt; 就能够看到结果。&lt;/p&gt;

&lt;h2 id=&quot;mysql&quot;&gt;安装 MySQL&lt;/h2&gt;

&lt;p&gt;参考 &lt;a href=&quot;http://www.piaoyi.org/php/568.html&quot;&gt;http://www.piaoyi.org/php/568.html&lt;/a&gt;&lt;/p&gt;</content><author><name>欧雷</name><email>ourairyu@gmail.com</email><uri>http://ourai.github.io/</uri></author><category term="apache" /><category term="mac-os" /><category term="mysql" /><category term="php" /><category term="development-environment" /><summary>我所使用的操作系统是 Mac OS X Yosemite，自带 Apache 和 PHP，所以不用安装，只需稍微修改一下配置文件即可。</summary></entry><entry><title>与心魔之战</title><link href="http://ourai.github.io/posts/fight-with-evil-in-heart/" rel="alternate" type="text/html" title="与心魔之战" /><published>2015-04-22T17:57:00+08:00</published><updated>2015-04-22T17:57:00+08:00</updated><id>http://ourai.github.io/posts/fight-with-evil-in-heart</id><content type="html" xml:base="http://ourai.github.io/posts/fight-with-evil-in-heart/">&lt;p&gt;今天是星期三，我已经跟自己的心魔较量了四天。虽然这些天内心一直在争斗，但是与不同的对象，也就是说是不同的“心魔”。第一个已经被我打倒，暂时不会起来；第二个正在搏斗，目前我占上风。&lt;/p&gt;

&lt;p&gt;这两个心魔分别是什么，不方便说也不想说，写本篇文字的目的在于记录、梳理一下自己的心情和思考结论。&lt;/p&gt;

&lt;p&gt;在内心争斗的过程中，情绪极度低沉，觉得自己变得十分脆弱，仿佛一口气就能粉碎我的心灵；这时的我，十分痛苦、消极、敏感，承受不了任何外界带来的压力，仿佛一粒尘就能压断我绷紧的神经。我不知道处于那种状态的我是一副什么表情，但我觉得自己身上好像散发出浓烈的阴郁气息，就像超级赛亚人所释放的气，其他人看到这样的我都是敬而远之吧？感觉自己像是没了灵魂的行尸走肉，头脑空白并目光呆滞地走着路，不知要走向哪里。这种痛苦不知道以前是否有过，但在我印象中，没有。虽然不是撕心裂肺，但有种类似于绝望了的心情。这期间，我不知默默地流了多少泪，一个人的战斗就是如此的艰辛和酸楚。&lt;/p&gt;

&lt;p&gt;还好，我现在想通了，甩掉了，走出来了！即使过不久它们也许会再次过来纠缠我，但我相信自己能够很快地再度将它们打倒！因为，经过它们的磨砺，我的内心已经变得比四天之前更为强大了！&lt;/p&gt;

&lt;p&gt;虽然是两个心魔，但它们都可划分为一类——人性与现实的矛盾。我是如何战胜心魔的也不方便说，我只说说感悟——&lt;/p&gt;

&lt;p&gt;实际上，世上没什么是重要的，家人、亲人、爱人、自己、孩子、金钱、理想，统统是虚无。做为个体，自己及相关的一切当然大过于天，然而对于土地、自然、地球、宇宙来说却是沧海一粟；现在的痛苦、烦恼虽然在当下折磨得自己死去活来，但在几十年的人生长河中却是不值得一提。所以，我们为什么要执着于那些看起来不起眼的事情？为什么要惩罚自己？因为我们是凡人，因为我们有七情六欲，因为我们自私。想要在拥有人形时却不为世间所烦恼的话，那就摒弃人性，忘掉七情六欲——不做“人”。&lt;/p&gt;

&lt;p&gt;谢谢心魔，让我能够将自己的注意力专注于让我痛苦的事情上而不是其他，让我能够静心地去思考，从而让我成长。&lt;/p&gt;

&lt;p&gt;正因为克服了那些原以为无法克服的困难，才会变得更加强大！&lt;/p&gt;</content><author><name>欧雷</name><email>ourairyu@gmail.com</email><uri>http://ourai.github.io/</uri></author><summary>今天是星期三，我已经跟自己的心魔较量了四天。虽然这些天内心一直在争斗，但是与不同的对象，也就是说是不同的“心魔”。第一个已经被我打倒，暂时不会起来；第二个正在搏斗，目前我占上风。</summary></entry></feed>
