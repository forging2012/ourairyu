version: 0.1.1
files:
  development:
    path: tatami.js
    size: '93.6kb'
  production:
    path: tatami.min.js
    size: '27.9kb'
  source_map: tatami.min.map
classes:
  - name: 核心
    flag: core
    categories:
      - name: 设置
        flag: setting
        apis:
          - func: mask
            desc: >
              <p>更改 Tatami 依附在全局对象上的名字。</p>
            invoke:
              - statement: 'Tatami.mask(guise)'
                arguments:
                  - name: guise
                    type: String
                return: Boolean
                desc:
                demo: >
                  Tatami.mask("Tatami_new");

                  => true


                  Tatami;

                  => ReferenceError: Tatami is not defined


                  Tatami_new;

                  => Object {mixin: function, each: function, type: function, slice: function, hasProp: function…}
          - func: alias
            desc: >
              <p>为 Tatami 起个别名。用别名也可以访问 Tatami 对象。</p>
            invoke:
              - statement: 'Tatami.alias(name)'
                arguments:
                  - name: name
                    type: String
                return: Object
                desc:
                demo:
  - name: 工具
    flag: utils
    categories:
      - name: 字符串
        flag: string
        apis:
          - func: stringify
            desc: >
              <p>将任意类型的变量转化为字符串。</p>
            invoke:
              - statement: 'Tatami.stringify(target)'
                arguments:
                  - name: target
                    type: 
                return: String
                desc: 
                demo:
          - func: pad
            desc: >
              <p>用指定占位符填补字符串。</p>
            invoke:
              - statement: 'Tatami.pad(target, length[, placeholder])'
                arguments:
                  - name: target
                    type: String
                  - name: length
                    type: Integer
                  - name: placeholder
                    type: String
                return: String
                desc: 
                demo:
          - func: capitalize
            desc: >
              <p>将字符串首字母大写。</p>
            invoke:
              - statement: 'Tatami.capitalize(target[, isAll])'
                arguments:
                  - name: target
                    type: String
                  - name: isAll
                    type: Boolean
                return: String
                desc: 
                demo:
          - func: camelCase
            desc: >
              <p>将字符串转换为驼峰式</p>
            invoke:
              - statement: 'Tatami.camelCase(target[, upper])'
                arguments:
                  - name: target
                    type: String
                  - name: upper
                    type: Boolean
                return: String
                desc: 
                demo:
          - func: zerofill
            desc: >
              <p>补零。</p>
            invoke:
              - statement: 'Tatami.zerofill(target, digit)'
                arguments:
                  - name: target
                    type: Number / String
                    desc: Numeric string
                  - name: digit
                    type: Integer
                return: String
                desc: 
                demo:
          - func: trim
            desc: >
              <p>移除字符串两端的空白符。</p>
            invoke:
              - statement: 'Tatami.trim(target)'
                arguments:
                  - name: target
                    type: String
                return: String
                desc: 
                demo:
          - func: substr
            desc: >
              <p>从指定位置开始截取指定长度的字符串。</p>
            invoke:
              - statement: 'Tatami.substr(target, start[, length][, ignore])'
                arguments:
                  - name: target
                    type: String
                  - name: start
                    type: Integer
                  - name: length
                    type: Integer
                  - name: ignore
                    type: String / RegExp
                return: String
                desc: 
                demo:
      - name: 数字
        flag: number
        apis:
          - func: random
            desc: >
              <p>返回一个随机整数。</p>
            invoke:
              - statement: 'Tatami.random(min[, max])'
                arguments:
                  - name: min
                    type: Number
                  - name: max
                    type: Number
                return: Integer
                desc: >
                  <p>返回一个介于 <code>min</code> 和 <code>max</code> 之间的整数，当忽略 <code>max</code> 时则返回 <code>0</code> 到 <code>min</code> 之间的整数。</p>
                demo: 
          # - func: 
          #   desc: >
          #   invoke:
          #     - statement: 
          #       arguments:
          #         - name: 
          #           type: 
          #       return: 
          #       desc: 
          #       demo: >
      - name: 集合
        flag: collection
        apis:
          - func: each
            desc: >
              <p>遍历数组、对象、类数组对象等。</p>
            invoke:
              - statement: 'Tatami.each(target[, callback])'
                arguments:
                  - name: target
                    type: Array / Object / Array-like object
                  - name: callback
                    type: Function
                return: Object
                desc: >
                  <p>每次遍历都会调用一次 <code>callback</code>，并向 <code>callback</code> 传入 3 个参数：</p>
                  <ol>
                    <li>当前的值</li>
                    <li>当前的索引（数组、类数组对象）或键（对象）</li>
                    <li>被遍历的集合</li>
                  </ol>
                  <p><code>callback</code> 的 <code>this</code> 指向当前的值。如果想跳出遍历，需要在 <code>callback</code> 中 <code>return false;</code>。</p>
                demo: >
                  // 遍历数组

                  Tatami.each([1, 2, 3, 4, 5], function(value, index, target) {
                    target[index] = this * value;
                    return !(this % 3 === 0);
                  });

                  => [1, 4, 9, 4, 5]


                  // 遍历对象

                  var str = "";

                  Tatami.each({foo: "foo", bar: "bar"}, function(value, key, target) {
                    str += this + value + key;
                  });

                  str;

                  => "foofoofoobarbarbar"
          - func: sum
            desc: >
              <p>计算集合中每个数字之和。</p>
            invoke:
              - statement: 'Tatami.sum(target)'
                arguments:
                  - name: target
                    type: Array / Plain object
                return: Number
                desc: 
                demo: 
          - func: max
            desc: 
            invoke:
              - statement: 'Tatami.max(target, callback[, context])'
                arguments:
                  - name: target
                    type: Array / Object
                  - name: callback
                    type: Function
                  - name: context
                    type: 
                return: Number
                desc: 
                demo: 
          - func: min
            desc: 
            invoke:
              - statement: 'Tatami.min(target, callback[, context])'
                arguments:
                  - name: target
                    type: Array / Object
                  - name: callback
                    type: Function
                  - name: context
                    type: 
                return: Number
                desc: 
                demo: 
          # - func: 
          #   desc: >
          #   invoke:
          #     - statement: 
          #       arguments:
          #         - name: 
          #           type: 
          #       return: 
          #       desc: 
          #       demo: >
          # - func: 
          #   desc: >
          #   invoke:
          #     - statement: 
          #       arguments:
          #         - name: 
          #           type: 
          #       return: 
          #       desc: 
          #       demo: >
          # - func: 
          #   desc: >
          #   invoke:
          #     - statement: 
          #       arguments:
          #         - name: 
          #           type: 
          #       return: 
          #       desc: 
          #       demo: >
          # - func: 
          #   desc: >
          #   invoke:
          #     - statement: 
          #       arguments:
          #         - name: 
          #           type: 
          #       return: 
          #       desc: 
          #       demo: >
          # - func: 
          #   desc: >
          #   invoke:
          #     - statement: 
          #       arguments:
          #         - name: 
          #           type: 
          #       return: 
          #       desc: 
          #       demo: >
      - name: 对象
        flag: objects
        apis:
          - func: mixin
            desc: >
              <p>扩展指定对象。</p>
            invoke:
              - statement: 'Tatami.mixin(target[, object1][, objectN])'
                arguments:
                  - name: target
                    type: Object
                  - name: object1
                    type: Object
                  - name: objectN
                    type: Object
                return: Object
                desc: >
                  <p>可以传入任意多个类型为 Object 的参数，如果具有相同的 key，则后者覆盖前者，否则附加到前者上。当只传入一个参数时，则扩展 Tatami 本身。返回值为被扩展的对象，即 <code>target</code>。</p>
                demo: >
                  // 扩展 Tatami 自身

                  Tatami.mixin({foo: true, bar: false});

                  Tatami.foo;

                  => true

                  Tatami.bar;

                  => false


                  // 返回新对象

                  Tatami.mixin({}, {foo: true, bar: false});

                  => {foo: true, bar: false}


                  Tatami.mixin();

                  => {}
          - func: extend
            desc: >
              <p>使用特定格式的数据扩充指定对象。内置「预处理」功能。</p>
            invoke:
              - statement: 'Tatami.extend(data[, target])'
                arguments:
                  - name: data
                    type: Array / Plain object
                  - name: target
                    type: Object
                return: Object
                desc:
                demo:
          - func: hasProp
            desc: >
              <p>判断指定对象自身是否拥有指定属性。</p>
            invoke:
              - statement: 'Tatami.hasProp(prop[, object])'
                arguments:
                  - name: prop
                    type: String
                  - name: object
                    type: Object
                return: Boolean
                desc: >
                  <p>当忽略 <code>object</code> 时，被检测的对象为 <code>window</code>。</p>
                demo: >
                  Tatami.hasProp("hasProp", Tatami);

                  => true


                  Tatami.hasProp("document");

                  => true
          - func: namespace
            desc: >
              <p>通过命名空间格式的字符串从指定对象上获取值。若指定对象上不存在相应的 key，则创建一个空对象。</p>
            invoke:
              - statement: 'Tatami.namespace(target[, nsStr1][, nsStrN][, isGlobal])'
                arguments:
                  - name: target
                    type: Object
                  - name: nsStr1
                    type: String
                  - name: nsStrN
                    type: String
                  - name: isGlobal
                    type: Boolean
                return: Object
                desc: >
                  <p><code>nsStr1</code> 和 <code>nsStrN</code> 是以 <code>.</code> 分割的由数字、字母和下划线所组成的字符串。若 <code>isGlobal</code> 的值为 <code>true</code>，则 <code>target</code> 为全局对象。</p>
                demo: 
          - func: keys
            desc: >
              <p>获取指定对象的 key 集合。</p>
            invoke:
              - statement: 'Tatami.keys(target)'
                arguments:
                  - name: target
                    type: Object
                return: Array
                desc: 
                demo: 
          # - func: 
          #   desc: >
          #   invoke:
          #     - statement: 
          #       arguments:
          #         - name: 
          #           type: 
          #       return: 
          #       desc: 
          #       demo: >
          # - func: 
          #   desc: >
          #   invoke:
          #     - statement: 
          #       arguments:
          #         - name: 
          #           type: 
          #       return: 
          #       desc: 
          #       demo: >
      - name: 数组及类数组
        flag: arrays
        apis:
          - func: slice
            desc: >
              <p>返回数组、类数组对象的片段。</p>
            invoke:
              - statement: 'Tatami.slice(target[, begin][, end])'
                arguments:
                  - name: target
                    type: Array / Array-like object
                  - name: begin
                    type: Integer
                  - name: end
                    type: Integer
                return: Array
                desc: >
                  <p><code>begin</code> 和 <code>end</code> 是以零开始的索引，为负数时表示从 <code>target</code> 的末尾算起的偏移量。当 <code>begin</code> 被忽略时从 <code>0</code> 开始截取；<code>end</code> 被忽略时，截取到 <code>target</code> 的末尾。</p>
                  <p class="note">String 类型也能够使用。</p>
                demo: >
                  var arr = [1, 2, 3, 4, 5, 6];


                  Tatami.slice(arr);

                  => [1, 2, 3, 4, 5, 6]


                  Tatami.slice(arr) === arr;

                  => false


                  Tatami.slice(arr, 2);

                  => [3, 4, 5, 6]


                  Tatami.slice(arr, -2);

                  => [5, 6]


                  Tatami.slice(arr, 2, 4);

                  => [3, 4]


                  Tatami.slice(arr, 2, 2);

                  => []


                  Tatami.slice(arr, -2, -3);

                  => []


                  Tatami.slice(arr, -2, -1);

                  => [5]


                  Tatami.slice(arr, 2, -1);

                  => [3, 4, 5]
          - func: inArray
            desc: >
              <p>元素在数组中的位置。</p>
            invoke:
              - statement: 'Tatami.inArray(element, array[, from])'
                arguments:
                  - name: element
                    type: 
                  - name: array
                    type: Array
                  - name: from
                    type: Integer
                return: Integer
                desc: 
                demo: 
          - func: filter
            desc: 
            invoke:
              - statement: 'Tatami.filter(target, callback[, context])'
                arguments:
                  - name: target
                    type: Array
                  - name: callback
                    type: Function
                  - name: context
                    type: 
                return: Array
                desc: >
                  <p class="note">同样适用于对象和字符串。</p>
                demo: 
          - func: map
            desc: >
              <p>改变每个元素的值。</p>
            invoke:
              - statement: 'Tatami.map(target, callback[, context])'
                arguments:
                  - name: target
                    type: Array
                  - name: callback
                    type: Function
                  - name: context
                    type: 
                return: Array
                desc: >
                  <p class="note">同样适用于对象和字符串。</p>
                demo: 
          - func: product
            desc: >
              <p>计算数组中每个数字的乘积。</p>
            invoke:
              - statement: 'Tatami.product(array)'
                arguments:
                  - name: array
                    type: Array
                return: Number
                desc: >
                  <p><code>array</code> 为数字数组。</p>
                demo: 
          - func: unique
            desc: >
              <p>移除重复的值。</p>
            invoke:
              - statement: 'Tatami.unique(array[, last])'
                arguments:
                  - name: array
                    type: Array
                  - name: last
                    type: Boolean
                return: Array
                desc: >
                  <p>数字型字符串会被转化为数字。如果 <code>last</code> 的值为 <code>true</code>，则保留相同的值中最后的那个。</p>
                demo: 
          - func: range
            desc: >
              <p>创建一个包含指定范围单元的数组。</p>
            invoke:
              - statement: 'Tatami.range(from, to[, step])'
                arguments:
                  - name: from
                    type: Number / String
                  - name: to
                    type: Number / String
                  - name: step
                    type: Number
                return: Array
                desc: >
                  <p>返回数组中从 <code>from</code> 到 <code>to</code> 的单元，包括它们本身。如果 <code>from</code> 大于 <code>to</code>，则序列将从 <code>to</code> 到 <code>from</code>。</p>
                demo: 
          - func: reduce
            desc: 
            invoke:
              - statement: 'Tatami.reduce(array, callback[, initialValue][, right])'
                arguments:
                  - name: array
                    type: Array
                  - name: callback
                    type: Function
                  - name: initialValue
                    type: 
                  - name: right
                    type: Boolean
                return: 
                desc: 
                demo: 
          - func: flatten
            desc: >
              <p>将嵌套数组扁平化。</p>
            invoke:
              - statement: 'Tatami.flatten(target)'
                arguments:
                  - name: target
                    type: Array
                return: Array
                desc: 
                demo: 
          - func: shuffle
            desc: 
            invoke:
              - statement: 'Tatami.shuffle(target)'
                arguments:
                  - name: target
                    type: Array
                return: Array
                desc: 
                demo: 
      - name: 日期时间
        flag: date
        apis:
          - func: date
            desc: >
              <p>格式化日期。</p>
            invoke:
              - statement: 'Tatami.date(format[, date])'
                arguments:
                  - name: format
                    type: String
                  - name: date
                    type: Date / String
                return: String
                desc: 
                demo: 
          - func: now
            desc: >
              <p>取得当前时间。</p>
            invoke:
              - statement: 'Tatami.now([isObject])'
                arguments:
                  - name: isObject
                    type: Boolean
                return: Integer / Date
                desc: 
                demo: 
      - name: 变量检测
        flag: data_type
        apis:
          - func: type
            desc: >
              <p>获取变量的数据类型。</p>
            invoke:
              - statement: Tatami.type(object)
                arguments:
                  - name: object
                    type: 
                return: String
                desc: >
                  <p>返回值为以下的其中之一：</p>
                  <ul>
                    <li><code>string</code></li>
                    <li><code>number</code></li>
                    <li><code>boolean</code></li>
                    <li><code>null</code></li>
                    <li><code>undefined</code></li>
                    <li><code>array</code></li>
                    <li><code>object</code></li>
                    <li><code>function</code></li>
                    <li><code>date</code></li>
                    <li><code>regexp</code></li>
                  </ul>
                demo: >
                  Tatami.type("");

                  => "string"


                  Tatami.type(1);

                  => "number"


                  Tatami.type(true);

                  => "boolean"


                  Tatami.type(null);

                  => "null"


                  Tatami.type(undefined);

                  => "undefined"


                  Tatami.type([]);

                  => "array"


                  Tatami.type({});

                  => "object"


                  Tatami.type(function() {});

                  => "function"


                  Tatami.type(new Date());

                  => "date"


                  Tatami.type(/.*/);

                  => "regexp"


                  Tatami.type();

                  => null
          - func: isString
            desc: >
              <p>判断是否为 String 类型。</p>
            invoke:
              - statement: Tatami.isString(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isString("");

                  => true


                  Tatami.isString(new String());

                  => true


                  Tatami.isString(undefined);

                  => false


                  Tatami.isString();

                  => false
          - func: isNumber
            desc: >
              <p>判断是否为 Number 类型。</p>
            invoke:
              - statement: Tatami.isNumber(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isNumber(1);

                  => true


                  Tatami.isNumber(-3.1415);

                  => true


                  Tatami.isNumber(NaN);

                  => false


                  Tatami.isNumber(Infinity);

                  => true


                  Tatami.isNumber("3.1415");

                  => false


                  Tatami.isNumber();

                  => false
          - func: isBoolean
            desc: >
              <p>判断是否为 Boolean 类型。</p>
            invoke:
              - statement: Tatami.isBoolean(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isBoolean(true);

                  => true


                  Tatami.isBoolean(undefined);

                  => false


                  Tatami.isBoolean(new Boolean());

                  => true


                  Tatami.isBoolean(null);

                  => false


                  Tatami.isBoolean();

                  => false
          - func: isArray
            desc: >
              <p>判断是否为 Array 类型。</p>
            invoke:
              - statement: Tatami.isArray(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isArray([]);

                  => true


                  Tatami.isArray(new Array());

                  => true


                  Tatami.isArray(document.links);

                  => false


                  Tatami.isArray({});

                  => false


                  Tatami.isArray("");

                  => false


                  Tatami.isArray();

                  => false
          - func: isObject
            desc: >
              <p>判断是否为 Object 类型。</p>
            invoke:
              - statement: Tatami.isObject(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isObject({});

                  => true


                  Tatami.isObject(window);

                  => true


                  Tatami.isObject([]);

                  => false


                  Tatami.isObject(null);

                  => false


                  Tatami.isObject(new Object());

                  => true


                  Tatami.isObject();

                  => false
          - func: isFunction
            desc: >
              <p>判断是否为 Function 类型。</p>
            invoke:
              - statement: Tatami.isFunction(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isFunction(function() {});

                  => true


                  Tatami.isFunction(new Function());

                  => true
          - func: isDate
            desc: >
              <p>判断是否为 Date 类型。</p>
            invoke:
              - statement: Tatami.isDate(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isDate(new Date());

                  => true
          - func: isRegExp
            desc: >
              <p>判断是否为 RegExp 类型。</p>
            invoke:
              - statement: Tatami.isRegExp(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isRegExp(new RegExp());

                  => true


                  Tatami.isRegExp(/.*/);

                  => true
          - func: isNumeric
            desc: >
              <p>判断是否为数字型字符串或 Number 类型。</p>
            invoke:
              - statement: Tatami.isNumeric(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isNumeric("-10");

                  => true


                  Tatami.isNumeric(16);

                  => true


                  Tatami.isNumeric(0xFF);

                  => true


                  Tatami.isNumeric("0Xee");

                  => true


                  Tatami.isNumeric(3.1415);

                  => true


                  Tatami.isNumeric(0144);

                  => true


                  Tatami.isNumeric("");

                  => false


                  Tatami.isNumeric([]);

                  => false


                  Tatami.isNumeric(NaN);

                  => false


                  Tatami.isNumeric(null);

                  => false


                  Tatami.isNumeric(true);

                  => false


                  Tatami.isNumeric(Infinity);

                  => false


                  Tatami.isNumeric(undefined);

                  => false
          - func: isInteger
            desc: >
              <p>判断是否为一个整型数字。</p>
            invoke:
              - statement: Tatami.isInteger(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isInteger(0x88);

                  => true


                  Tatami.isInteger(0100);

                  => true


                  Tatami.isInteger(+10.0);

                  => true


                  Tatami.isInteger(-1);

                  => true


                  Tatami.isInteger("0x88");

                  => true


                  Tatami.isInteger("0100");

                  => true


                  Tatami.isInteger("+10.0");

                  => true


                  Tatami.isInteger("-1");

                  => true
          - func: isArrayLike
            desc: >
              <p>判断是否为类数组对象。</p>
            invoke:
              - statement: Tatami.isArrayLike(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isArrayLike([]);

                  => false


                  Tatami.isArrayLike(document.links);

                  => true


                  Tatami.isArrayLike(document.getElementsByTagName("div"));

                  => true
          - func: isPlainObject
            desc: >
              <p>判断是否为纯对象。</p>
            invoke:
              - statement: Tatami.isPlainObject(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isPlainObject(document);

                  => false


                  Tatami.isPlainObject({});

                  => true


                  Tatami.isPlainObject(new Object());

                  => true
          - func: isEmpty
            desc: >
              <p>判断是否为空。</p>
            invoke:
              - statement: Tatami.isEmpty(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: >
                  <p>当 <code>object</code> 的值是以下几种：</p>
                  <ul>
                    <li><code>null</code></li>
                    <li><code>undefined</code></li>
                    <li><code>""</code></li>
                    <li><code>{}</code></li>
                  </ul>
                  <p>或者是数组、类数组对象并且 <code>object.length</code> 的值为 <code>0</code> 时，结果返回 <code>true</code>。</p>
                demo: >
                  Tatami.isEmpty(null);

                  => true

                  
                  Tatami.isEmpty(undefined);

                  => true

                  
                  Tatami.isEmpty("");

                  => true

                  
                  Tatami.isEmpty([]);

                  => true

                  
                  Tatami.isEmpty({});

                  => true
          - func: isWindow
            desc: >
              <p>判断是否为 Window 对象。</p>
            invoke:
              - statement: Tatami.isWindow(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isWindow(window);

                  => true
          - func: isElement
            desc: >
              <p>判断是否为 DOM 元素节点。</p>
            invoke:
              - statement: Tatami.isElement(object)
                arguments:
                  - name: object
                    type: 
                return: Boolean
                desc: 
                demo: >
                  Tatami.isElement(document);

                  => false


                  Tatami.isElement(document.body);

                  => true


                  Tatami.isElement(window);

                  => false
          - func: equal
            desc: >
              <p>比较两个变量是否相等。</p>
            invoke:
              - statement: 'Tatami.equal(base, target[, strict])'
                arguments:
                  - name: base
                    type: 
                  - name: target
                    type: 
                  - name: strict
                    type: Boolean
                return: Boolean
                desc: >
                  <p>当 <code>base</code> 和 <code>target</code> 为纯对象或数组，并且 <code>strict</code> 的值为 <code>true</code> 时，是对它们的引用进行比较。</p>
                demo: 
      # - name: 
      #   flag: 
      #   apis:
      #     - func: 
      #       desc: >
      #       invoke:
      #         - statement: 
      #           arguments:
      #             - name: 
      #               type: 
      #           return: 
      #           desc: 
      #           demo: >
  - name: 项目开发
    flag: project
    categories:
      - name: 运行环境
        flag: runtime
        apis:
          - func: browser
            desc: >
              <p>获取浏览器的相关信息，包括种类及版本号。</p>
            invoke:
              - statement: Tatami.browser
                return: Object
                desc: >
                  <p>以 <code>{BROWSER_TYPE: true, version: "BROWSER_VERSION"}</code> 的形式返回。其中 <code>BROWSER_TYPE</code> 的可能值有：</p>
                  <ul>
                    <li><code>msie</code></li>
                    <li><code>chrome</code></li>
                    <li><code>firefox</code></li>
                    <li><code>safari</code></li>
                    <li><code>opera</code></li>
                  </ul>
                  <p class="note">当值为 <code>chrome</code> 或 <code>safari</code> 时，会多出一个 <code>{webkit: true}</code> 属性；当值为 <code>firefox</code> 时，会多出一个 <code>{mozilla: true}</code> 属性。</p>
                demo: >
                  // IE 浏览器

                  Tatami.browser;

                  => {msie: true, version: "11.0"}


                  // Chrome 浏览器

                  Tatami.browser;

                  => {chrome: true, version: "34.0.1847.131", webkit: true}
          - func: platform
            desc: >
              <p>获取平台的相关信息，包括种类、版本号及是否可触摸。</p>
            invoke:
              - statement: Tatami.platform
                return: Object
                desc: >
                  <p>以 <code>{PLATFORM_TYPE: true, version: "PLATFORM_VERSION", touchable: true}</code> 的形式返回。其中 <code>PLATFORM_TYPE</code> 的可能值有：</p>
                  <ul>
                    <li><code>windows</code></li>
                    <li><code>macintosh</code></li>
                    <li><code>iphone</code></li>
                    <li><code>ipod</code></li>
                    <li><code>ipad</code></li>
                    <li>...</li>
                  </ul>
                  <p class="note">当值为 <code>iphone</code>、<code>ipod</code> 或 <code>ipad</code> 时，会多出一个 <code>{ios: true}</code> 属性。</p>
                demo: >
                  // Windows 7

                  Tatami.platform;

                  => {touchable: false, version: "7", windows: true}


                  // iPhone 5s

                  Tatami.platform;

                  => {touchable: true, version: "7.1.2", iphone: true, ios: true}
          - func: plugins
            desc: >
              <p>获取插件的支持情况。目前支持的插件检测有以下几种：</p>
              <ul>
                <li>PDF</li>
              </ul>
            invoke:
              - statement: Tatami.plugins
                return: Object
                desc: 
                demo: >
                  Tatami.plugins.pdf;

                  => true
      - name: 流程控制
        flag: flow
        apis:
          - func: sandbox
            desc: >
              <p>封闭运行环境的开关，每个页面只能运行一次。</p>
            invoke:
              - statement: 'Tatami.sandbox(settings)'
                arguments:
                  - name: settings
                    type: Object
                    desc: Plain object
                return: Object / Boolean
                desc: 
                demo:
          - func: prepare
            desc: >
              <p>DOM 未加载完时调用的处理函数。</p>
            invoke:
              - statement: 'Tatami.prepare(handler)'
                arguments:
                  - name: handler
                    type: Function
                return: undefined
                desc: 
                demo:
          - func: ready
            desc: >
              <p>DOM 加载完成时调用的处理函数。</p>
            invoke:
              - statement: 'Tatami.ready(handler)'
                arguments:
                  - name: handler
                    type: Function
                return: undefined
                desc: 
                demo:
      - name: 其他
        flag: other
        apis:
          - func: encodeEntities
            desc: >
              <p>将字符串中的一些字符转换为实体。</p>
            invoke:
              - statement: 'Tatami.encodeEntities(target)'
                arguments:
                  - name: target
                    type: String
                return: String
                desc: 
                demo:
          - func: config
            desc: >
              <p>获取系统信息。</p>
            invoke:
              - statement: 'Tatami.config([key])'
                arguments:
                  - name: key
                    type: String
                return: 
                desc: 
                demo:
          - func: init
            desc: >
              <p>设置初始化信息。</p>
            invoke:
              - statement: 'Tatami.init(settings)'
                arguments:
                  - name: settings
                    type: Object
                return: 
                desc: 
                demo:
              - statement: 'Tatami.init(function, key)'
                arguments:
                  - name: function
                    type: Function
                  - name: key
                    type: String
                return: 
                desc: 
                demo:
          - func: i18n
            desc: >
              <p>设置及获取国际化信息。</p>
            invoke:
              - statement: 'Tatami.i18n(settings)'
                arguments:
                  - name: settings
                    type: Object
                return: undefined
                desc: 
                demo:
              - statement: 'Tatami.i18n(key[, params])'
                arguments:
                  - name: key
                    type: String
                  - name: params
                    type: Object
                return: String
                desc: 
                demo:
          - func: api
            desc: >
              <p>设置及获取 Web API。</p>
            invoke:
              - statement: 'Tatami.api(settings)'
                arguments:
                  - name: settings
                    type: Object
                return: undefined
                desc: 
                demo:
              - statement: 'Tatami.api(key[, params])'
                arguments:
                  - name: key
                    type: String
                  - name: params
                    type: Object
                return: String
                desc: 
                demo:
          - func: route
            desc: >
              <p>设置及获取页面 URL。</p>
            invoke:
              - statement: 'Tatami.route(settings)'
                arguments:
                  - name: settings
                    type: Object
                return: undefined
                desc: 
                demo:
              - statement: 'Tatami.route(key[, params])'
                arguments:
                  - name: key
                    type: String
                  - name: params
                    type: Object
                return: String
                desc: 
                demo:
          - func: asset
            desc: >
              <p>设置及获取资源 URL。</p>
            invoke:
              - statement: 'Tatami.asset(settings)'
                arguments:
                  - name: settings
                    type: Object
                return: undefined
                desc: 
                demo:
              - statement: 'Tatami.asset(key[, params])'
                arguments:
                  - name: key
                    type: String
                  - name: params
                    type: Object
                return: String
                desc: 
                demo:
          - func: ajax
            desc: >
              <p>Asynchronous JavaScript and XML</p>
            invoke:
              - statement: 'Tatami.ajax(url[, succeed][, fail])'
                arguments:
                  - name: url
                    type: String
                  - name: succeed
                    type: Function
                  - name: fail
                    type: Function
                return: Object
                desc: 
                demo:
              - statement: 'Tatami.ajax(options[, succeed][, fail])'
                arguments:
                  - name: options
                    type: Object
                  - name: succeed
                    type: Function
                  - name: fail
                    type: Function
                return: Object
                desc: 
                demo:
          - func: sjax
            desc: >
              <p>Synchronous JavaScript and XML</p>
            invoke:
              - statement: 'Tatami.sjax(url[, succeed][, fail])'
                arguments:
                  - name: url
                    type: String
                  - name: succeed
                    type: Function
                  - name: fail
                    type: Function
                return: Object
                desc: 
                demo:
              - statement: 'Tatami.sjax(options[, succeed][, fail])'
                arguments:
                  - name: options
                    type: Object
                  - name: succeed
                    type: Function
                  - name: fail
                    type: Function
                return: Object
                desc: 
                demo:
          - func: data
            desc: >
              <p>获取 DOM 的「data-*」属性集或存储数据到内部/从内部获取数据。</p>
            invoke:
              - statement: 'Tatami.data(node)'
                arguments:
                  - name: node
                    type: DOM
                return: Object
                desc: 
                demo:
              - statement: 'Tatami.data(key, data[, lock])'
                arguments:
                  - name: key
                    type: String
                  - name: data
                    type: 
                  - name: lock
                    type: Boolean
                return: 
                desc: 
                demo:
              - statement: 'Tatami.data(key)'
                arguments:
                  - name: key
                    type: String
                return: 
                desc: 
                demo:
          - func: save
            desc: >
              <p>将数据保存到本地。</p>
            invoke:
              - statement: 'Tatami.save(key, data)'
                arguments:
                  - name: key
                    type: String
                  - name: data
                    type: 
                return: undefined
                desc: 
                demo:
          - func: access
            desc: >
              <p>访问保存到本地的数据。</p>
            invoke:
              - statement: 'Tatami.access(key)'
                arguments:
                  - name: key
                    type: String
                return: 
                desc: 
                demo:
          - func: pathname
            desc: >
              <p>获取 URL 中的 pathname 部分。</p>
            invoke:
              - statement: 'Tatami.pathname(url)'
                arguments:
                  - name: url
                    type: String
                return: String
                desc: 
                demo:
          - func: alert
            desc: >
              <p>自定义警告提示框</p>
            invoke:
              - statement: 'Tatami.alert(message[, callback])'
                arguments:
                  - name: message
                    type: String
                  - name: callback
                    type: Function
                return: Boolean
                desc: 
                demo:
          - func: confirm
            desc: >
              <p>自定义确认提示框（两个按钮）</p>
            invoke:
              - statement: 'Tatami.confirm(message[, okCallback][, cancelCallback])'
                arguments:
                  - name: message
                    type: String
                  - name: okCallback
                    type: Function
                  - name: cancelCallback
                    type: Function
                return: Boolean
                desc: 
                demo:
          - func: confirmEX
            desc: >
              <p>自定义确认提示框（三个按钮）</p>
            invoke:
              - statement: 'Tatami.confirmEX(message[, yesCallback][, noCallback])'
                arguments:
                  - name: message
                    type: String
                  - name: yesCallback
                    type: Function
                  - name: noCallback
                    type: Function
                return: 
                desc: 
                demo:
          - func: queue
            desc: >
              <p>将外部处理函数引入到沙盒中。</p>
            invoke:
              - statement: 'Tatami.queue(funcList)'
                arguments:
                  - name: funcList
                    type: Object
                return: undefined
                desc: 
                demo:
              - statement: 'Tatami.queue(funcName, handler)'
                arguments:
                  - name: funcName
                    type: String
                  - name: handler
                    type: Function
                return: Function
                desc: 
                demo:
              - statement: 'Tatami.queue(funcName)'
                arguments:
                  - name: funcName
                    type: String
                return: Function
                desc: 
                demo:
              - statement: 'Tatami.queue()'
                return: Object
                desc: 
                demo:
          - func: run
            desc: >
              <p>执行指定函数。</p>
            invoke:
              - statement: 'Tatami.run(funcName)'
                arguments:
                  - name: funcName
                    type: String
                return: 
                desc: 
                demo:
              - statement: 'Tatami.run(funcNameList)'
                arguments:
                  - name: funcNameList
                    type: Array
                return: undefined
                desc: 
                demo:
          - func: url
            desc: >
              <p></p>
            invoke:
              - statement: 'Tatami.url()'
                return: Object
                desc: 
                demo:
          - func: download
            desc: >
              <p></p>
            invoke:
              - statement: 'Tatami.download(url[, fileName])'
                arguments:
                  - name: url
                    type: String
                  - name: fileName
                    type: String
                return: undefined
                desc: 
                demo:
          - func: functionExists
            desc: >
              <p>检测指定函数是否已经定义过。</p>
            invoke:
              - statement: 'Tatami.functionExists(funcName[, isWindow])'
                arguments:
                  - name: funcName
                    type: String
                  - name: isWindow
                    type: Boolean
                return: Boolean
                desc: >
                  <p>默认从 Tatami 内部的函数列表中查找 <code>funcName</code>，若 <code>isWindow</code> 设置为 <code>true</code>，则从 <code>window</code> 对象上找。</p>
                demo:
      # - name: 
      #   flag: 
      #   apis:
      #     - func: 
      #       desc: >
      #         <p></p>
      #       invoke:
      #         - statement: 'Tatami.'
      #           arguments:
      #             - name: 
      #               type: 
      #           return: 
      #           desc: 
      #           demo:
      # - name: 
      #   flag: 
      #   apis:
      #     - func: 
      #       desc: >
      #         <p></p>
      #       invoke:
      #         - statement: 'Tatami.'
      #           arguments:
      #             - name: 
      #               type: 
      #           return: 
      #           desc: 
      #           demo:
      # - name: 
      #   flag: 
      #   apis:
      #     - func: 
      #       desc: >
      #         <p></p>
      #       invoke:
      #         - statement: 'Tatami.'
      #           arguments:
      #             - name: 
      #               type: 
      #           return: 
      #           desc: 
      #           demo:
# project:
  # <h3>项目开发</h3>
  # <dl>
  #   <dt>sandbox</dt>
  #   <dd></dd>
  #   <dt>prepare</dt>
  #   <dd></dd>
  #   <dt>ready</dt>
  #   <dd></dd>
  #   <dt>queue</dt>
  #   <dd></dd>
  #   <dt>run</dt>
  #   <dd></dd>
  #   <dt>i18n</dt>
  #   <dd></dd>
  #   <dt>api</dt>
  #   <dd></dd>
  #   <dt>route</dt>
  #   <dd></dd>
  #   <dt>asset</dt>
  #   <dd></dd>
  #   <dt>save</dt>
  #   <dd></dd>
  #   <dt>access</dt>
  #   <dd></dd>
  #   <dt>ajax</dt>
  #   <dd></dd>
  #   <dt>sjax</dt>
  #   <dd></dd>
  #   <dt>config</dt>
  #   <dd></dd>
  #   <dt>alert</dt>
  #   <dd></dd>
  #   <dt>confirm</dt>
  #   <dd></dd>
  #   <dt>confirmEX</dt>
  #   <dd></dd>
  #   <dt>data</dt>
  #   <dd></dd>
  #   <dt>download</dt>
  #   <dd></dd>
  #   <dt>functionExists</dt>
  #   <dd></dd>
  #   <dt>pathname</dt>
  #   <dd></dd>
  # </dl>
  # <h3>工具方法</h3>
  # <dl>
  #   <dt>camelCase</dt>
  #   <dd></dd>
  #   <dt>capitalize</dt>
  #   <dd></dd>
  #   <dt>countChars</dt>
  #   <dd></dd>
  #   <dt>date</dt>
  #   <dd></dd>
  #   <dt>each</dt>
  #   <dd></dd>
  #   <dt>encodeEntities</dt>
  #   <dd></dd>
  #   <dt>equal</dt>
  #   <dd></dd>
  #   <dt>extend</dt>
  #   <dd></dd>
  #   <dt>filter</dt>
  #   <dd></dd>
  #   <dt>flatten</dt>
  #   <dd></dd>
  #   <dt>hasProp</dt>
  #   <dd></dd>
  #   <dt>inArray</dt>
  #   <dd></dd>
  #   <dt>init</dt>
  #   <dd></dd>
  #   <dt>keys</dt>
  #   <dd></dd>
  #   <dt>map</dt>
  #   <dd></dd>
  #   <dt>alias</dt>
  #   <dd></dd>
  #   <dt>mask</dt>
  #   <dd></dd>
  #   <dt>max</dt>
  #   <dd></dd>
  #   <dt>min</dt>
  #   <dd></dd>
  #   <dt>mixin</dt>
  #   <dd></dd>
  #   <dt>namespace</dt>
  #   <dd></dd>
  #   <dt>now</dt>
  #   <dd></dd>
  #   <dt>pad</dt>
  #   <dd></dd>
  #   <dt>product</dt>
  #   <dd></dd>
  #   <dt>random</dt>
  #   <dd></dd>
  #   <dt>range</dt>
  #   <dd></dd>
  #   <dt>reduce</dt>
  #   <dd></dd>
  #   <dt>shuffle</dt>
  #   <dd></dd>
  #   <dt>slice</dt>
  #   <dd></dd>
  #   <dt>stringify</dt>
  #   <dd></dd>
  #   <dt>substr</dt>
  #   <dd></dd>
  #   <dt>sum</dt>
  #   <dd></dd>
  #   <dt>trim</dt>
  #   <dd></dd>
  #   <dt>unique</dt>
  #   <dd></dd>
  #   <dt>url</dt>
  #   <dd></dd>
  #   <dt>zerofill</dt>
  #   <dd></dd>
  # </dl>
